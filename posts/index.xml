<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ayush Subedi</title>
    <link>https://subedi.ml/posts/</link>
    <description>Recent content in Posts on Ayush Subedi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 11 Jul 2020 10:02:00 +0545</lastBuildDate>
    
	<atom:link href="https://subedi.ml/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ames Housing</title>
      <link>https://subedi.ml/posts/ames_housing/</link>
      <pubDate>Sat, 11 Jul 2020 10:02:00 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/ames_housing/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Synthetic Data Generation</title>
      <link>https://subedi.ml/posts/synthetic_data_harvesting/</link>
      <pubDate>Fri, 03 Jul 2020 06:18:16 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/synthetic_data_harvesting/</guid>
      <description></description>
    </item>
    
    <item>
      <title>You vs Bezos - Weber Fencher law</title>
      <link>https://subedi.ml/posts/bezos/</link>
      <pubDate>Wed, 01 Jul 2020 10:09:16 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/bezos/</guid>
      <description>&lt;p&gt;1 million seconds equal 11.5 days, whereas 1 billion seconds equal 31.75 years. Very large numbers are baffling to us, humans. From an evolutionary point of view, we  never had to deal with anything colossal. With the recent news of Amazon boss Jeff Bezos now being worth about as much as New Zealand’s economy, it is quite interesting to see how he compares to rest of the celebrities we consider rich. It is absolutely shocking that the wealth difference between Elon Musk and YOU is smaller than between Elon Musk and Jeff Bezos.&lt;/p&gt;
&lt;div class=&#39;tableauPlaceholder&#39; id=&#39;viz1599480108593&#39; style=&#39;position: relative&#39;&gt;&lt;noscript&gt;&lt;a href=&#39;https:&amp;#47;&amp;#47;moonlitplayground.ml&amp;#47;bezos&#39;&gt;&lt;img alt=&#39; &#39; src=&#39;https:&amp;#47;&amp;#47;public.tableau.com&amp;#47;static&amp;#47;images&amp;#47;WI&amp;#47;WIPbezos&amp;#47;Dashboard1&amp;#47;1_rss.png&#39; style=&#39;border: none&#39; /&gt;&lt;/a&gt;&lt;/noscript&gt;&lt;object class=&#39;tableauViz&#39;  style=&#39;display:none;&#39;&gt;&lt;param name=&#39;host_url&#39; value=&#39;https%3A%2F%2Fpublic.tableau.com%2F&#39; /&gt; &lt;param name=&#39;embed_code_version&#39; value=&#39;3&#39; /&gt; &lt;param name=&#39;site_root&#39; value=&#39;&#39; /&gt;&lt;param name=&#39;name&#39; value=&#39;WIPbezos&amp;#47;Dashboard1&#39; /&gt;&lt;param name=&#39;tabs&#39; value=&#39;no&#39; /&gt;&lt;param name=&#39;toolbar&#39; value=&#39;no&#39; /&gt;&lt;param name=&#39;static_image&#39; value=&#39;https:&amp;#47;&amp;#47;public.tableau.com&amp;#47;static&amp;#47;images&amp;#47;WI&amp;#47;WIPbezos&amp;#47;Dashboard1&amp;#47;1.png&#39; /&gt; &lt;param name=&#39;animate_transition&#39; value=&#39;yes&#39; /&gt;&lt;param name=&#39;display_static_image&#39; value=&#39;yes&#39; /&gt;&lt;param name=&#39;display_spinner&#39; value=&#39;yes&#39; /&gt;&lt;param name=&#39;display_overlay&#39; value=&#39;yes&#39; /&gt;&lt;param name=&#39;display_count&#39; value=&#39;yes&#39; /&gt;&lt;param name=&#39;language&#39; value=&#39;en&#39; /&gt;&lt;param name=&#39;filter&#39; value=&#39;publish=yes&#39; /&gt;&lt;/object&gt;&lt;/div&gt;                &lt;script type=&#39;text/javascript&#39;&gt;                    var divElement = document.getElementById(&#39;viz1599480108593&#39;);                    var vizElement = divElement.getElementsByTagName(&#39;object&#39;)[0];                    vizElement.style.width=&#39;750px&#39;;vizElement.style.height=&#39;904px&#39;;                    var scriptElement = document.createElement(&#39;script&#39;);                    scriptElement.src = &#39;https://public.tableau.com/javascripts/api/viz_v1.js&#39;;                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                &lt;/script&gt;</description>
    </item>
    
    <item>
      <title>Devs in Nepal</title>
      <link>https://subedi.ml/posts/devs_in_nepal/</link>
      <pubDate>Mon, 01 Jun 2020 12:12:12 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/devs_in_nepal/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Cheers Hospital Analysis</title>
      <link>https://subedi.ml/posts/cheers_analysis/</link>
      <pubDate>Sun, 01 Mar 2020 04:09:44 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/cheers_analysis/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Data in News</title>
      <link>https://subedi.ml/posts/data_in_news/</link>
      <pubDate>Fri, 03 Jan 2020 09:45:16 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/data_in_news/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Nepal Data Literacy Program</title>
      <link>https://subedi.ml/posts/nepal_data_literacy/</link>
      <pubDate>Tue, 31 Dec 2019 08:00:10 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/nepal_data_literacy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Solveathon Nepal 2019</title>
      <link>https://subedi.ml/posts/solveathon_nepal/</link>
      <pubDate>Thu, 05 Dec 2019 09:09:55 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/solveathon_nepal/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Evidence for better policy</title>
      <link>https://subedi.ml/posts/evidence_better_policy/</link>
      <pubDate>Sun, 01 Dec 2019 08:06:19 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/evidence_better_policy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>British College AI Conference</title>
      <link>https://subedi.ml/posts/british_ai_conference/</link>
      <pubDate>Tue, 05 Nov 2019 08:05:11 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/british_ai_conference/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Melting Glaciers of Nepal</title>
      <link>https://subedi.ml/posts/melting_glaciers/</link>
      <pubDate>Tue, 05 Nov 2019 07:36:19 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/melting_glaciers/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Trove Summary</title>
      <link>https://subedi.ml/posts/trove_summary/</link>
      <pubDate>Sun, 01 Sep 2019 09:16:00 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/trove_summary/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Underlying Architecture of Trove</title>
      <link>https://subedi.ml/posts/trove_architecture/</link>
      <pubDate>Sun, 30 Jun 2019 08:06:19 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/trove_architecture/</guid>
      <description>&lt;p&gt;After &lt;a href=&#34;https://www.producthunt.com/posts/trove-9149602d-c028-40ef-9c2d-55303953986d&#34;&gt;releasing&lt;/a&gt; &lt;a href=&#34;https://app.trovenow.com/&#34;&gt;Trove&lt;/a&gt;, our inboxes and &lt;a href=&#34;https://twitter.com/Trovenow&#34;&gt;DMs&lt;/a&gt; flooded with questions pertaining to the underlying architecture of Trove, and most importantly, about DAaps (Decentralized Apps) and the &lt;a href=&#34;https://blockstack.org/&#34;&gt;Blockstack&lt;/a&gt; platform. &lt;strong&gt;The purpose of this post is to answer those burning questions and to take you on a journey of figuring all of this out ourselves.&lt;/strong&gt;  &lt;br&gt;
The engineers @Trove have strong understanding and experience of centralized applications. We followed the decentralized space, and also built small prototypes in Blockstack and Ethereum platforms. But, Trove is our first endeavour to create a full end-to-end Decentralized Application from scratch. We had questions.
Actually, a lot of them.&lt;/p&gt;
&lt;h3 id=&#34;proof-of-concept&#34;&gt;Proof of Concept&lt;/h3&gt;
&lt;p&gt;A proof of concept entails investigating to be convinced of an idea. In our case, the idea was a bookmark manager. However, we also had to deep dive into the Blockstack platform to get a gist of the second part of our idea, i.e., decentralization.
We started with a &lt;em&gt;very very simple decentralized app.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1600/0*Maa7FgRAd3IqJLwt.png&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;p&gt;We quickly put together a decentralized app that allowed users to save their favorite words. Although the app does not make sense from a usability perspective, and might be hilarious to even think about deploying it to production, it helped answer a lot of our questions:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How will the users login/signup to use the app?&lt;/strong&gt;
The users will create an ID with Blockstack. &lt;strong&gt;The ID will be used to sign in all apps in the Blockstack ecosystem.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where is the data stored?&lt;/strong&gt;
By default, when an ID is created in Blockstack, each user ID is also issued some storage space. &lt;strong&gt;This storage system is called Gaia.&lt;/strong&gt; The primary purpose of Gaia is to store any relevant data for the apps that the user uses in the Blockstack ecosystem. However, Blockstack also allows users to choose their own Gaia hub and to configure the back-end provider to store data with. Learn more &lt;a href=&#34;https://github.com/blockstack/gaia&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How is the data stored in Gaia?&lt;/strong&gt;
Gaia is not a DBMS. The data for an app is stored in one or many text format files (JSON) within the app’s hub in Gaia.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Is it encrypted?&lt;/strong&gt;
This depends on the developers. The developers can choose whether or not a file should be encrypted. For our case, the words in the proof of concept app were encrypted and the bookmarks for Trove are encrypted as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How is it decentralized?&lt;/strong&gt;
One of the most common questions we have been receiving is regarding decentralization. Several users new to the Blockstack ecosystem have asked, &lt;em&gt;“If all of my bookmarks are in the same place, how is it decentralized?”&lt;/em&gt;. Well, there are a few ways of thinking about this. From the perspective of the developers, all of the data pertaining to the app are scattered in several Gaia storage all over. There is no possible way for the makers of an app to have all of the data of all of the users in a centralized repository. This makes it decentralized. Also, no central repository implies no machine learning algorithm tinkering to garner patterns and trends on collective data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Now, can we now build a MVP for our purposes?&lt;/strong&gt;
Yes.
At this point, we had a better understanding of the approach to make Trove possible and optimized to leverage on Blockstack and Gaia. &lt;strong&gt;Moreover, we realized that a bookmark manager would be an ideal exploration for this platform because bookmarks are sacred to a specific user, and they are not normally shared.&lt;/strong&gt; We might eventually work on the functionality of publicly shared bookmarks in the future if our users request it.&lt;/p&gt;
&lt;h1 id=&#34;product-specification-and-minimum-viable-product&#34;&gt;&lt;strong&gt;Product Specification and Minimum Viable Product&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1600/0*36-E1o7DqQQbsfNn.jpg&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;p&gt;The team collectively decided to pursue these functionalities for the first version of the app:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CRUD bookmarks&lt;/li&gt;
&lt;li&gt;CRUD buckets/categories for bookmarks&lt;/li&gt;
&lt;li&gt;CRUD tags&lt;/li&gt;
&lt;li&gt;Favorite bookmarks&lt;/li&gt;
&lt;li&gt;Archive bookmarks&lt;/li&gt;
&lt;li&gt;Archive buckets/categories&lt;/li&gt;
&lt;li&gt;Extract meta tags of bookmarks&lt;/li&gt;
&lt;li&gt;Extract HTML body of bookmarks for Read Mode (Parked for future version of the app)&lt;/li&gt;
&lt;li&gt;Extract keywords from bookmarks (Parked for future version of the app)&lt;/li&gt;
&lt;li&gt;Filter using buckets/categories, tags, favourites&lt;/li&gt;
&lt;li&gt;Search&lt;/li&gt;
&lt;li&gt;Browser extensions&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;architecture&#34;&gt;&lt;strong&gt;Architecture&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;How are the files stored in Gaia for Trove?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/632/1*WzrD9Qjlpt4PbkA-T0Iu1w.png&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;p&gt;Every Trove user has three files associated with their Gaia hub to store bookmark, collections and archived objects. This schema is also backward compatible. Backward compatibility is a major issue with Gaia because schema changes in the future to incorporate any other features where we do not have access to user’s Gaia (by definition), is a major constraint and therefore needs precautions.
**If we were to add &lt;em&gt;Read Mode&lt;/em&gt; in the future (which will have massive content and makes no sense to be stored inside bookmark object anyway), it can be stored on a separate file {bookmark_id}.json and referenced with the id. This implies, in the future, a user will have 3+ files, while everything remains maintainable, compatible and scalable.
A randomly generated id in base 36 (0–9, a-z) with a length of 9 is used for each category and each bookmark. The probability of collision for a user limits to 0 (1/36⁹). This decision was made so that ids can be assigned on the go without having to keep track of array sizes for incremental ids.
When a bookmark is created, and assigned to a category, the bookmark object stores the id of the category and not the name. This referential association allows for seamless category name edits.
For the sake of blog post brevity, we are leaving out a lot of the trivial implementation that is common with centralized architecture design pattern (archive, tags, filter, search etc).
&lt;strong&gt;Extension&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1600/0*CUrk-zRTYflhc_Ja.jpeg&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;p&gt;We initially started with one click bookmark save on our extension. This implied a seamless experience for the users. However, server-less comes with its limitation. In a centralized system, once the user clicked on the extension, we would have sent the URL to our back-end, scraped meta-tags and stored it in a database record referencing the user. We do not have the liberty here. The URL is sent to our open-sourced back-end for meta tag extraction, but that is all it does. It returns the response back to the extension, which does the rest. This implies a user would have to wait for a few seconds while:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We collect meta tags from back-end&lt;/li&gt;
&lt;li&gt;Collect all bookmarks from Gaia&lt;/li&gt;
&lt;li&gt;Change 2 to an array&lt;/li&gt;
&lt;li&gt;Append response from back-end to the array&lt;/li&gt;
&lt;li&gt;Save array to Gaia as a JSON&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Therefore, we decided to make it a two-step process. We are still researching on ways to make this part seamless to our users.
&lt;strong&gt;URL Meta Extractor&lt;/strong&gt;
A simple Flask app using &lt;a href=&#34;https://newspaper.readthedocs.io/en/latest/&#34;&gt;Newspaper&lt;/a&gt; package has been used for the purpose of URL extraction. The back-end extractor is open sourced at &lt;a href=&#34;https://gitlab.com/trovenow/trovenow_url_parser&#34;&gt;https://gitlab.com/trovenow/trovenow_url_parser&lt;/a&gt;.
Use the &lt;a href=&#34;https://app.trovenow.com/&#34;&gt;&lt;strong&gt;app&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/trovenow&#34;&gt;&lt;strong&gt;tweet us&lt;/strong&gt;&lt;/a&gt; ****for more clarification. We would love to hear your feedback. Also, please show your support by up-voting us &lt;a href=&#34;https://www.producthunt.com/posts/trove-9149602d-c028-40ef-9c2d-55303953986d&#34;&gt;&lt;strong&gt;here.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1270/1*Gnvj5hkPrKuSJnmvBjAfLQ.png&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Final Version (v1) of Trove&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fraud Detection</title>
      <link>https://subedi.ml/posts/fraud_detection/</link>
      <pubDate>Tue, 01 Jan 2019 08:06:19 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/fraud_detection/</guid>
      <description>&lt;h1 id=&#34;fraud-detection&#34;&gt;Fraud Detection&lt;/h1&gt;
&lt;h2 id=&#34;research-items&#34;&gt;Research Items&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Data Sets&lt;/li&gt;
&lt;li&gt;Relevant Papers&lt;/li&gt;
&lt;li&gt;Available Solutions&lt;/li&gt;
&lt;li&gt;Machine learning&lt;/li&gt;
&lt;li&gt;Pre-processing&lt;/li&gt;
&lt;li&gt;Features analysis&lt;/li&gt;
&lt;li&gt;Modelling&lt;/li&gt;
&lt;li&gt;Evaluation&lt;/li&gt;
&lt;li&gt;Suggested Solution&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1-data-sets&#34;&gt;1. Data Sets&lt;/h2&gt;
&lt;p&gt;The first step is to find fraud data sets for modeling purposes. Unfortunately, fraud data sets are really difficult to find publicly because of the confidential information that they contain. Listed below are some of the data sets found and notes on them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Real world data set from Kaggle (ULB)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.kaggle.com/mlg-ulb/creditcardfraud&#34;&gt;https://www.kaggle.com/mlg-ulb/creditcardfraud&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The data set contains labelled credit card transactions labeled as fraudulent or genuine. Unfortunately, the column labels do not make sense because PCA has been applied for dimensional reduction. Therefore, it is very difficult to understand what each of the columns represent. Nonetheless, it is real world data.  The data sets contains transactions made by credit cards in September 2013 by European cardholders. This data set presents transactions that occurred in two days, where we have 492 frauds out of 284,807 transactions. &lt;strong&gt;The data set is highly unbalanced, the positive class (frauds) account for 0.172% of all transactions.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This data set has been analysed and models have been created below in the document, with F1 score of 94%.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Synthetic data set from Kaggle (NTNU)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.kaggle.com/ntnu-testimon/paysim1&#34;&gt;https://www.kaggle.com/ntnu-testimon/paysim1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The data set contains synthetic (created) transaction data. The advantage of using this data set is that PCA has not been pre-performed, thus allowing extraction of all useful information. However, the data set is scaled down to 1/4th of the original data set.&lt;/p&gt;
&lt;h2 id=&#34;2-papers&#34;&gt;2. Papers:&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Link&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Title&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.aaai.org/Papers/KDD/1998/KDD98-026.pdf&#34;&gt;https://www.aaai.org/Papers/KDD/1998/KDD98-026.pdf&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Toward Scalable Learning with Non-uniform Class and Cost Distributions: A Case Study in Credit Card Fraud Detection&lt;/td&gt;
&lt;td&gt;Handling skewed datasets, compares credit card fraud detection models, and evaluate how the different sets of features have an impact on the results with the help of a real credit card fraud dataset provided by a large European card processing company (the dataset above). The results show an average increase in savings of 13% by including the proposed periodic features into the methods. &lt;br&gt;&lt;br&gt;Using 50-50 split in fraud, non-fraud leads to better models.&lt;br&gt;&lt;br&gt;von Mises distribution: &lt;a href=&#34;https://en.wikipedia.org/wiki/Von_Mises_distribution&#34;&gt;https://en.wikipedia.org/wiki/Von_Mises_distribution&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.aaai.org/Papers/Workshops/1997/WS-97-07/WS97-07-015.pdf&#34;&gt;https://www.aaai.org/Papers/Workshops/1997/WS-97-07/WS97-07-015.pdf&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Credit Card Fraud Detection using Meta-Learning: Issues and Initials Results&lt;/td&gt;
&lt;td&gt;Apart from the finding like above (using balanced training), the paper talks about using metrics other than accuracy for model evaluation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://journal.utem.edu.my/index.php/jtec/article/view/3571/2466&#34;&gt;http://journal.utem.edu.my/index.php/jtec/article/view/3571/2466&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Credit Card Fraud Detection Using Machine Learning As Data Mining Technique&lt;/td&gt;
&lt;td&gt;95% accuracy based on Naive based derivatives.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.jair.org/index.php/jair/article/view/10302/24590&#34;&gt;https://www.jair.org/index.php/jair/article/view/10302/24590&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;SMOTE: Synthetic Minority Over-sampling Technique&lt;/td&gt;
&lt;td&gt;Using SMOTE method as described in the paper is another alternative of getting around the skewness problem.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;3-research-on-available-solutions&#34;&gt;3. Research on available solutions:&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Airbnb&lt;/strong&gt;
&lt;a href=&#34;https://medium.com/airbnb-engineering/architecting-a-machine-learning-system-for-risk-941abbba5a60&#34;&gt;https://medium.com/airbnb-engineering/architecting-a-machine-learning-system-for-risk-941abbba5a60&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ways to mitigate potential bad actors to carry out different types of attacks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Product changes: 2FA, email verification, etc etc&lt;/li&gt;
&lt;li&gt;Anomaly detection: Scripted attacks that can cause anomaly&lt;/li&gt;
&lt;li&gt;heuristics/machine learning model based on different factors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Framework&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fast and robust&lt;/li&gt;
&lt;li&gt;Agile (catch up game)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PMML: Predictive model markup language
Openscoring: encodes several common types of machine learning models&lt;/p&gt;
&lt;p&gt;They do not provide fraud detection as a service.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paypal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://venturebeat.com/2018/06/21/paypal-to-acquire-machine-learning-powered-fraud-detection-startup-simility/&#34;&gt;https://venturebeat.com/2018/06/21/paypal-to-acquire-machine-learning-powered-fraud-detection-startup-simility/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Paypal recently acquired Simility for fraud detection.&lt;/p&gt;
&lt;p&gt;Simility looks at various session, device, and behavioral bio-metrics and builds a profile for what constitutes “normal” user login behavior; if an anomaly is spotted, it can act to prevent the action.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.dropbox.com/s/ft3wu5ix15xukhc/Mobile%20Fintech%20Fraud.pdf?dl=0&#34;&gt;https://www.dropbox.com/s/ft3wu5ix15xukhc/Mobile%20Fintech%20Fraud.pdf?dl=0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stripe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stripe.com/us/radar&#34;&gt;https://stripe.com/us/radar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Even if a card is new to your business, there’s an 89% chance it’s been seen before on the Stripe network.&lt;/p&gt;
&lt;h2 id=&#34;4-machine-learning&#34;&gt;4. Machine Learning&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Supervised learning was applied to the PCA data set discussed in the data sets section.&lt;/li&gt;
&lt;li&gt;Different ensemble machine learning algorithms were tested, rather than using one particular algorithm for modelling.&lt;/li&gt;
&lt;li&gt;Metrics like Precision, Recall, F1 score were used to evaluate the model and get a better understanding of True Positives, True Negatives, False Positive and False Negatives.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ayushsubedi/fraud_detection/blob/master/PCA_applied_dataset.ipynb&#34;&gt;Link to complete notebook&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Results:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Random Forest&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Accuracy score for Random Forest : 0.9538461538461539
Precision score Random Forest : 0.98
Recall score Random Forest : 0.9245283018867925
F1 score Random Forest : 0.9514563106796116
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Bagging&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Accuracy score for Bagging : 0.963076923076923
Precision score Bagging : 0.9867549668874173
Recall score Bagging : 0.9371069182389937
F1 score Bagging : 0.9612903225806452
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;AdaBoost&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Accuracy score for Ada Boost Classifier : 0.9446153846153846
Precision score Ada Boost Classifier : 0.9795918367346939
Recall score Ada Boost Classifier : 0.9056603773584906
F1 score Ada Boost Classifier : 0.9411764705882353
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;False Positives vs False Negatives&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uc29b242eafa0323079c59de5fc0.previews.dropboxusercontent.com/p/thumb/AA6wvSlgpVw_UCQieCOAFCnCY7-pM3DqJHXKMIImW212qOFwUAphNe5k_qajpfHMLtsf6neHowUSn7aMPUrwwhlgxD3j9AfUAD7CsTD961sQ6gaht6kn2wfdJYm46GwQwW8DncIuzVtzwh8q169uEdp7Fw_0uBaBxCNJbQoqt-YVRI1f8nskTqVx_NrLJyVybhA5lW_dc02Iqhrql5kbv35sLLsCN_B9D0CdV3Dxdup3twa-YtsUF1xBqwXki83c3dtM4dnkbsNMiwk3w6MHXlu6T-Yyn-VuPVFOnNRWYapLlpWZMz-Q9F7TMz1ISka9udXN4jDlJF-gucN_RAECXwB0wpP5XZI35aWjvtyhXrPhubrOFzBHDQN_51eiGbuAvpceW6J8UKBaGzOZgsLl5jwK/p.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shabda Kathmandu</title>
      <link>https://subedi.ml/posts/shabda_kathmandu/</link>
      <pubDate>Mon, 31 Dec 2018 10:10:11 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/shabda_kathmandu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Spirathon 2019</title>
      <link>https://subedi.ml/posts/spirathon/</link>
      <pubDate>Thu, 20 Dec 2018 10:11:01 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/spirathon/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Torpe Blockchain</title>
      <link>https://subedi.ml/posts/torpe/</link>
      <pubDate>Sun, 28 Oct 2018 01:10:00 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/torpe/</guid>
      <description>&lt;h1 id=&#34;torpe-blockchain-तरप-बलककचन&#34;&gt;Torpe Blockchain (तोर्पे ब्लोक्कचैन)&lt;/h1&gt;
&lt;h3 id=&#34;a-minimal-blockchain-data-structure-to-understand-the-blockchain-basics-like-hashing-nonce-states-genesis-blocks-etc&#34;&gt;A minimal blockchain data structure to understand the blockchain basics like hashing, nonce, states, genesis blocks etc.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://subedi.ml/img/blockchain.jpg&#34; alt=&#34;blockchain&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;hash-function&#34;&gt;Hash Function&lt;/h3&gt;
&lt;p&gt;A hash function is any function that can be used to map data of arbitrary size to data of a fixed size. The values returned by a hash function are called hash values, hash codes, digests, or simply hashes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; hashlib
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hash_sha256&lt;/span&gt;(raw):
    raw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(raw)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; hashlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sha256(raw)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest() 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;hash_sha256(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;torpe_blockchain&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&#39;e5367197a1f12480ec761306f2fa9d15b494d5a80e5a806713df9e60943f4faf&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;hash_sha256(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;torpe_blockchain&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&#39;e5367197a1f12480ec761306f2fa9d15b494d5a80e5a806713df9e60943f4faf&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;hash_sha256(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;torpe_blockchaiN&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&#39;71fe90af906a9afa507ee54287595df6d7267df05428b3f91429371ebd27cb3e&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hashes for the same text are the same as seen above.  Even when one character of the string is changed, the hash generated as a result seems to be completely random.&lt;/p&gt;
&lt;p&gt;SHA-256 collisions have not been found yet.&lt;/p&gt;
&lt;h3 id=&#34;nonce&#34;&gt;Nonce&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Number that can only be used once&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;An arbitrary numer used in cryptography to ensure uniqueness and prevent the rerunning of transactions (known as replay attack).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hash_sha256_nonce&lt;/span&gt;(raw):
    raw_bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(raw)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)
    hashed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sha256(raw_bytes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest() 
    nonce &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (hashed[:&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;00000&amp;#39;&lt;/span&gt;):
        nonce &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nonce&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        raw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nonce&amp;#39;&lt;/span&gt;: nonce})
        raw_bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(raw)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)
        hashed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sha256(raw_bytes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest() 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; raw, hashed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; (hash_sha256_nonce({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;proof_of_work&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nonce&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;}))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;({&#39;hello&#39;: &#39;proof_of_work&#39;, &#39;nonce&#39;: 623228}, &#39;00000a9d45728c6f4d1eff383dab4d96b753495c8b312ecb5d1858116885ee55&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;proof-of-work&#34;&gt;Proof of work&lt;/h3&gt;
&lt;p&gt;The proof of work for this case will be to generate hashes with five leading zeros (by incrementing the nonce). This is the &amp;ldquo;mining&amp;rdquo; part.&lt;/p&gt;
&lt;h2 id=&#34;block&#34;&gt;Block&lt;/h2&gt;
&lt;p&gt;Blocks hold batches of valid transactions that are hashed and encoded into a Merkle tree Each block includes the cryptographic hash of the prior block in the blockchain, linking the two. The linked blocks form a chain. This iterative process confirms the integrity of the previous block, all the way back to the original genesis block.&lt;/p&gt;
&lt;h3 id=&#34;genesis-block&#34;&gt;Genesis Block&lt;/h3&gt;
&lt;p&gt;A genesis block or block0 is the first block of a block chain. The genesis block is almost always hardcoded into the software of the applications that utilize its block chain. It is a special case in that it does not reference a previous block&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; datetime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Lets assume 5 person were given 100 coins each&lt;/span&gt;
state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Person_1&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, 
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Person_2&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, 
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Person_3&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, 
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Person_4&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, 
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Person_5&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;block0_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;: datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now(),
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;previous&amp;#39;&lt;/span&gt;: None,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transactions&amp;#39;&lt;/span&gt;: [state], 
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nonce&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
}

raw, hashed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hash_sha256_nonce(block0_data)
block0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hash&amp;#39;&lt;/span&gt;: hashed,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;: raw,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;block0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;{&#39;hash&#39;: &#39;0000044b11859efa71c555a87a68090f1f602cf8bcd35bb5446c3c5532f5ad5e&#39;,
 &#39;data&#39;: {&#39;timestamp&#39;: datetime.datetime(2020, 9, 9, 7, 37, 44, 877080),
  &#39;index&#39;: 0,
  &#39;previous&#39;: None,
  &#39;transactions&#39;: [{&#39;Person_1&#39;: 100,
    &#39;Person_2&#39;: 100,
    &#39;Person_3&#39;: 100,
    &#39;Person_4&#39;: 100,
    &#39;Person_5&#39;: 100}],
  &#39;nonce&#39;: 2700821}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the genesis block or block 0 here.&lt;/p&gt;
&lt;h3 id=&#34;transactions&#34;&gt;Transactions&lt;/h3&gt;
&lt;p&gt;Lets create some random transactions. The transactions for the demo purpose follow +x, -x semantic. See the examples below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;random_transaction&lt;/span&gt;(state):
    temp_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys())
    random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shuffle(temp_list)
    &lt;span style=&#34;color:#75715e&#34;&gt;# randomly select two persons&lt;/span&gt;
    first_person &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temp_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
    second_person &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temp_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
    receive &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
    give &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;receive
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {
        first_person:receive, 
        second_person:give
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;test_transactions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [random_transaction(state) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;test_transactions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[{&#39;Person_3&#39;: 5, &#39;Person_5&#39;: -5},
 {&#39;Person_3&#39;: 7, &#39;Person_5&#39;: -7},
 {&#39;Person_4&#39;: 1, &#39;Person_1&#39;: -1},
 {&#39;Person_2&#39;: 4, &#39;Person_1&#39;: -4},
 {&#39;Person_4&#39;: 4, &#39;Person_5&#39;: -4}]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;updating-state&#34;&gt;Updating State&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update_state&lt;/span&gt;(transaction, state):
    state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; transaction:
        state[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(key, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; transaction[key]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; state
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; transaction &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; test_transactions:
    state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; update_state(transaction, state)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;state
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;{&#39;Person_1&#39;: 95,
 &#39;Person_2&#39;: 104,
 &#39;Person_3&#39;: 112,
 &#39;Person_4&#39;: 105,
 &#39;Person_5&#39;: 84}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;valid-transactions&#34;&gt;Valid Transactions&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_transaction_validity&lt;/span&gt;(transaction, state):
    &lt;span style=&#34;color:#75715e&#34;&gt;# check neg vs pos&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sum(transaction&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values()) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
    &lt;span style=&#34;color:#75715e&#34;&gt;# check if amount in wallet to give&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; transaction&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys():
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(key, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; transaction[key] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; transaction &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; test_transactions:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; (check_transaction_validity(transaction, state))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;True
True
True
True
True
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# No balance&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; (check_transaction_validity({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;}))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Bad transaction&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; (check_transaction_validity({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;}))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;initial-state&#34;&gt;Initial State&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Let us reset&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Lets assume 5 person were given 100 coins each&lt;/span&gt;
state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Person_1&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, 
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Person_2&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, 
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Person_3&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, 
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Person_4&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, 
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Person_5&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
}

blockchain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Adding the genesis block&lt;/span&gt;
blockchain&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(block0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;blockchain
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[{&#39;hash&#39;: &#39;0000044b11859efa71c555a87a68090f1f602cf8bcd35bb5446c3c5532f5ad5e&#39;,
  &#39;data&#39;: {&#39;timestamp&#39;: datetime.datetime(2020, 9, 9, 7, 37, 44, 877080),
   &#39;index&#39;: 0,
   &#39;previous&#39;: None,
   &#39;transactions&#39;: [{&#39;Person_1&#39;: 100,
     &#39;Person_2&#39;: 100,
     &#39;Person_3&#39;: 100,
     &#39;Person_4&#39;: 100,
     &#39;Person_5&#39;: 100}],
   &#39;nonce&#39;: 2700821}}]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;non-genesis-block--new-block&#34;&gt;Non-genesis block / New block&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new_block&lt;/span&gt;(transactions, blockchain):
    previous_block &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; blockchain[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;: datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now(),
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;: previous_block[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;previous&amp;#39;&lt;/span&gt;: previous_block[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hash&amp;#39;&lt;/span&gt;],
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transactions&amp;#39;&lt;/span&gt;: transactions,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nonce&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        }
    
    raw, hashed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hash_sha256_nonce(data)
    block &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hash&amp;#39;&lt;/span&gt;: hashed, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;: raw}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; block
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;sample_transactions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [random_transaction(state) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;sample_transactions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[{&#39;Person_5&#39;: 5, &#39;Person_1&#39;: -5},
 {&#39;Person_3&#39;: 10, &#39;Person_1&#39;: -10},
 {&#39;Person_2&#39;: 5, &#39;Person_4&#39;: -5},
 {&#39;Person_5&#39;: 9, &#39;Person_3&#39;: -9},
 {&#39;Person_3&#39;: 1, &#39;Person_2&#39;: -1},
 {&#39;Person_1&#39;: 9, &#39;Person_3&#39;: -9},
 {&#39;Person_1&#39;: 7, &#39;Person_3&#39;: -7},
 {&#39;Person_5&#39;: 4, &#39;Person_3&#39;: -4},
 {&#39;Person_5&#39;: 2, &#39;Person_4&#39;: -2},
 {&#39;Person_2&#39;: 4, &#39;Person_3&#39;: -4},
 {&#39;Person_3&#39;: 5, &#39;Person_5&#39;: -5},
 {&#39;Person_5&#39;: 1, &#39;Person_1&#39;: -1},
 {&#39;Person_1&#39;: 1, &#39;Person_2&#39;: -1},
 {&#39;Person_2&#39;: 7, &#39;Person_1&#39;: -7},
 {&#39;Person_2&#39;: 7, &#39;Person_5&#39;: -7},
 {&#39;Person_3&#39;: 2, &#39;Person_1&#39;: -2},
 {&#39;Person_3&#39;: 3, &#39;Person_1&#39;: -3},
 {&#39;Person_3&#39;: 3, &#39;Person_2&#39;: -3},
 {&#39;Person_3&#39;: 6, &#39;Person_1&#39;: -6},
 {&#39;Person_1&#39;: 5, &#39;Person_3&#39;: -5},
 {&#39;Person_2&#39;: 4, &#39;Person_3&#39;: -4},
 {&#39;Person_2&#39;: 1, &#39;Person_5&#39;: -1},
 {&#39;Person_1&#39;: 3, &#39;Person_2&#39;: -3},
 {&#39;Person_1&#39;: 10, &#39;Person_2&#39;: -10},
 {&#39;Person_3&#39;: 9, &#39;Person_5&#39;: -9},
 {&#39;Person_1&#39;: 3, &#39;Person_4&#39;: -3},
 {&#39;Person_4&#39;: 2, &#39;Person_3&#39;: -2},
 {&#39;Person_5&#39;: 6, &#39;Person_3&#39;: -6},
 {&#39;Person_2&#39;: 9, &#39;Person_1&#39;: -9},
 {&#39;Person_3&#39;: 3, &#39;Person_4&#39;: -3},
 {&#39;Person_3&#39;: 10, &#39;Person_4&#39;: -10},
 {&#39;Person_1&#39;: 9, &#39;Person_4&#39;: -9},
 {&#39;Person_2&#39;: 3, &#39;Person_1&#39;: -3},
 {&#39;Person_2&#39;: 6, &#39;Person_3&#39;: -6},
 {&#39;Person_4&#39;: 4, &#39;Person_1&#39;: -4},
 {&#39;Person_3&#39;: 7, &#39;Person_1&#39;: -7},
 {&#39;Person_3&#39;: 7, &#39;Person_1&#39;: -7},
 {&#39;Person_3&#39;: 5, &#39;Person_2&#39;: -5},
 {&#39;Person_3&#39;: 10, &#39;Person_2&#39;: -10},
 {&#39;Person_2&#39;: 1, &#39;Person_1&#39;: -1},
 {&#39;Person_1&#39;: 3, &#39;Person_5&#39;: -3},
 {&#39;Person_4&#39;: 4, &#39;Person_5&#39;: -4},
 {&#39;Person_1&#39;: 3, &#39;Person_2&#39;: -3},
 {&#39;Person_4&#39;: 1, &#39;Person_1&#39;: -1},
 {&#39;Person_5&#39;: 1, &#39;Person_4&#39;: -1},
 {&#39;Person_3&#39;: 5, &#39;Person_2&#39;: -5},
 {&#39;Person_1&#39;: 8, &#39;Person_4&#39;: -8},
 {&#39;Person_3&#39;: 8, &#39;Person_4&#39;: -8},
 {&#39;Person_3&#39;: 7, &#39;Person_4&#39;: -7},
 {&#39;Person_2&#39;: 1, &#39;Person_1&#39;: -1}]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;transactions-per-block&#34;&gt;Transactions per block&lt;/h3&gt;
&lt;p&gt;Bitcoin blocks used to contain fewer than 200 transactions and the largest number of transactions in a block was 1,976 at the time this answer was originally written (May 2013). In meanwhile (November 2017) the average number of transaction per block is well above 1500 with peaks above 2200.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Assume block size is 5&lt;/span&gt;
transactions_per_block &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
transaction_block &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; transaction &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sample_transactions:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; check_transaction_validity(transaction, state):
        state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; update_state(transaction, state)
        transaction_block&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(transaction)
        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(transaction_block) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; transactions_per_block:
            blockchain&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(new_block(transaction_block, blockchain))
            transaction_block &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint
pp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PrettyPrinter()
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; block &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; blockchain:
    pp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(block)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;************************************************************************************&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;{&#39;data&#39;: {&#39;index&#39;: 0,
          &#39;nonce&#39;: 2700821,
          &#39;previous&#39;: None,
          &#39;timestamp&#39;: datetime.datetime(2020, 9, 9, 7, 37, 44, 877080),
          &#39;transactions&#39;: [{&#39;Person_1&#39;: 100,
                            &#39;Person_2&#39;: 100,
                            &#39;Person_3&#39;: 100,
                            &#39;Person_4&#39;: 100,
                            &#39;Person_5&#39;: 100}]},
 &#39;hash&#39;: &#39;0000044b11859efa71c555a87a68090f1f602cf8bcd35bb5446c3c5532f5ad5e&#39;}

************************************************************************************

{&#39;data&#39;: {&#39;index&#39;: 1,
          &#39;nonce&#39;: 2395688,
          &#39;previous&#39;: &#39;0000044b11859efa71c555a87a68090f1f602cf8bcd35bb5446c3c5532f5ad5e&#39;,
          &#39;timestamp&#39;: datetime.datetime(2020, 9, 9, 7, 37, 58, 781195),
          &#39;transactions&#39;: [{&#39;Person_1&#39;: -5, &#39;Person_5&#39;: 5},
                           {&#39;Person_1&#39;: -10, &#39;Person_3&#39;: 10},
                           {&#39;Person_2&#39;: 5, &#39;Person_4&#39;: -5},
                           {&#39;Person_3&#39;: -9, &#39;Person_5&#39;: 9},
                           {&#39;Person_2&#39;: -1, &#39;Person_3&#39;: 1}]},
 &#39;hash&#39;: &#39;00000303c468fe76fe73dfc089b856af02eda615c296ddde95c0c60999561048&#39;}

************************************************************************************

{&#39;data&#39;: {&#39;index&#39;: 2,
          &#39;nonce&#39;: 2475862,
          &#39;previous&#39;: &#39;00000303c468fe76fe73dfc089b856af02eda615c296ddde95c0c60999561048&#39;,
          &#39;timestamp&#39;: datetime.datetime(2020, 9, 9, 7, 38, 16, 454296),
          &#39;transactions&#39;: [{&#39;Person_1&#39;: 9, &#39;Person_3&#39;: -9},
                           {&#39;Person_1&#39;: 7, &#39;Person_3&#39;: -7},
                           {&#39;Person_3&#39;: -4, &#39;Person_5&#39;: 4},
                           {&#39;Person_4&#39;: -2, &#39;Person_5&#39;: 2},
                           {&#39;Person_2&#39;: 4, &#39;Person_3&#39;: -4}]},
 &#39;hash&#39;: &#39;00000804a078686673c26bd3d391649da822c27a9eb87c2a86f07be5be7667c0&#39;}

************************************************************************************

{&#39;data&#39;: {&#39;index&#39;: 3,
          &#39;nonce&#39;: 843595,
          &#39;previous&#39;: &#39;00000804a078686673c26bd3d391649da822c27a9eb87c2a86f07be5be7667c0&#39;,
          &#39;timestamp&#39;: datetime.datetime(2020, 9, 9, 7, 38, 34, 360082),
          &#39;transactions&#39;: [{&#39;Person_3&#39;: 5, &#39;Person_5&#39;: -5},
                           {&#39;Person_1&#39;: -1, &#39;Person_5&#39;: 1},
                           {&#39;Person_1&#39;: 1, &#39;Person_2&#39;: -1},
                           {&#39;Person_1&#39;: -7, &#39;Person_2&#39;: 7},
                           {&#39;Person_2&#39;: 7, &#39;Person_5&#39;: -7}]},
 &#39;hash&#39;: &#39;0000004fdf3bc704c17b3f38c8bcb0306443e24db0c5971c7494cea67e618fcd&#39;}

************************************************************************************

{&#39;data&#39;: {&#39;index&#39;: 4,
          &#39;nonce&#39;: 456491,
          &#39;previous&#39;: &#39;0000004fdf3bc704c17b3f38c8bcb0306443e24db0c5971c7494cea67e618fcd&#39;,
          &#39;timestamp&#39;: datetime.datetime(2020, 9, 9, 7, 38, 40, 443823),
          &#39;transactions&#39;: [{&#39;Person_1&#39;: -2, &#39;Person_3&#39;: 2},
                           {&#39;Person_1&#39;: -3, &#39;Person_3&#39;: 3},
                           {&#39;Person_2&#39;: -3, &#39;Person_3&#39;: 3},
                           {&#39;Person_1&#39;: -6, &#39;Person_3&#39;: 6},
                           {&#39;Person_1&#39;: 5, &#39;Person_3&#39;: -5}]},
 &#39;hash&#39;: &#39;000001ea0d5ee3360f087e8fe25e643a8e749af6b42bf8c3045303a3e4dc80a5&#39;}

************************************************************************************

{&#39;data&#39;: {&#39;index&#39;: 5,
          &#39;nonce&#39;: 1793595,
          &#39;previous&#39;: &#39;000001ea0d5ee3360f087e8fe25e643a8e749af6b42bf8c3045303a3e4dc80a5&#39;,
          &#39;timestamp&#39;: datetime.datetime(2020, 9, 9, 7, 38, 43, 617133),
          &#39;transactions&#39;: [{&#39;Person_2&#39;: 4, &#39;Person_3&#39;: -4},
                           {&#39;Person_2&#39;: 1, &#39;Person_5&#39;: -1},
                           {&#39;Person_1&#39;: 3, &#39;Person_2&#39;: -3},
                           {&#39;Person_1&#39;: 10, &#39;Person_2&#39;: -10},
                           {&#39;Person_3&#39;: 9, &#39;Person_5&#39;: -9}]},
 &#39;hash&#39;: &#39;00000101ed3a68b2340f553e1a373e7a590823fb34ee1e2f3c2e4ed44b647c2a&#39;}

************************************************************************************

{&#39;data&#39;: {&#39;index&#39;: 6,
          &#39;nonce&#39;: 618433,
          &#39;previous&#39;: &#39;00000101ed3a68b2340f553e1a373e7a590823fb34ee1e2f3c2e4ed44b647c2a&#39;,
          &#39;timestamp&#39;: datetime.datetime(2020, 9, 9, 7, 38, 56, 256050),
          &#39;transactions&#39;: [{&#39;Person_1&#39;: 3, &#39;Person_4&#39;: -3},
                           {&#39;Person_3&#39;: -2, &#39;Person_4&#39;: 2},
                           {&#39;Person_3&#39;: -6, &#39;Person_5&#39;: 6},
                           {&#39;Person_1&#39;: -9, &#39;Person_2&#39;: 9},
                           {&#39;Person_3&#39;: 3, &#39;Person_4&#39;: -3}]},
 &#39;hash&#39;: &#39;00000b2395e1efb034610e89196aafe9407417bbac1cd60f300adccea3cd880d&#39;}

************************************************************************************

{&#39;data&#39;: {&#39;index&#39;: 7,
          &#39;nonce&#39;: 4087255,
          &#39;previous&#39;: &#39;00000b2395e1efb034610e89196aafe9407417bbac1cd60f300adccea3cd880d&#39;,
          &#39;timestamp&#39;: datetime.datetime(2020, 9, 9, 7, 39, 0, 705135),
          &#39;transactions&#39;: [{&#39;Person_3&#39;: 10, &#39;Person_4&#39;: -10},
                           {&#39;Person_1&#39;: 9, &#39;Person_4&#39;: -9},
                           {&#39;Person_1&#39;: -3, &#39;Person_2&#39;: 3},
                           {&#39;Person_2&#39;: 6, &#39;Person_3&#39;: -6},
                           {&#39;Person_1&#39;: -4, &#39;Person_4&#39;: 4}]},
 &#39;hash&#39;: &#39;00000ef1b9a090a4b6636f86fa3d264dbcab13f5cf87d994637e656b6ec4abad&#39;}

************************************************************************************

{&#39;data&#39;: {&#39;index&#39;: 8,
          &#39;nonce&#39;: 991443,
          &#39;previous&#39;: &#39;00000ef1b9a090a4b6636f86fa3d264dbcab13f5cf87d994637e656b6ec4abad&#39;,
          &#39;timestamp&#39;: datetime.datetime(2020, 9, 9, 7, 39, 29, 983211),
          &#39;transactions&#39;: [{&#39;Person_1&#39;: -7, &#39;Person_3&#39;: 7},
                           {&#39;Person_1&#39;: -7, &#39;Person_3&#39;: 7},
                           {&#39;Person_2&#39;: -5, &#39;Person_3&#39;: 5},
                           {&#39;Person_2&#39;: -10, &#39;Person_3&#39;: 10},
                           {&#39;Person_1&#39;: -1, &#39;Person_2&#39;: 1}]},
 &#39;hash&#39;: &#39;0000021d8da5dab8b274a0146db6ddd6b1c12f34d751f84e9755fae1ed6a42b3&#39;}

************************************************************************************

{&#39;data&#39;: {&#39;index&#39;: 9,
          &#39;nonce&#39;: 24885,
          &#39;previous&#39;: &#39;0000021d8da5dab8b274a0146db6ddd6b1c12f34d751f84e9755fae1ed6a42b3&#39;,
          &#39;timestamp&#39;: datetime.datetime(2020, 9, 9, 7, 39, 37, 55377),
          &#39;transactions&#39;: [{&#39;Person_1&#39;: 3, &#39;Person_5&#39;: -3},
                           {&#39;Person_4&#39;: 4, &#39;Person_5&#39;: -4},
                           {&#39;Person_1&#39;: 3, &#39;Person_2&#39;: -3},
                           {&#39;Person_1&#39;: -1, &#39;Person_4&#39;: 1},
                           {&#39;Person_4&#39;: -1, &#39;Person_5&#39;: 1}]},
 &#39;hash&#39;: &#39;000002090602b338740f28ac66dfdc2f9949c8c40303574e0be08ad7033550bb&#39;}

************************************************************************************

{&#39;data&#39;: {&#39;index&#39;: 10,
          &#39;nonce&#39;: 545615,
          &#39;previous&#39;: &#39;000002090602b338740f28ac66dfdc2f9949c8c40303574e0be08ad7033550bb&#39;,
          &#39;timestamp&#39;: datetime.datetime(2020, 9, 9, 7, 39, 37, 232552),
          &#39;transactions&#39;: [{&#39;Person_2&#39;: -5, &#39;Person_3&#39;: 5},
                           {&#39;Person_1&#39;: 8, &#39;Person_4&#39;: -8},
                           {&#39;Person_3&#39;: 8, &#39;Person_4&#39;: -8},
                           {&#39;Person_3&#39;: 7, &#39;Person_4&#39;: -7},
                           {&#39;Person_1&#39;: -1, &#39;Person_2&#39;: 1}]},
 &#39;hash&#39;: &#39;00000d59159d699830d454d68d2077ed40da8ae060ec67c19be0814d35a61e6f&#39;}

************************************************************************************
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;the-current-state&#34;&gt;The current state&lt;/h3&gt;
&lt;h4 id=&#34;syncing-for-the-first-time&#34;&gt;Syncing for the first time&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;validate_block&lt;/span&gt;(block, parent, state):    
    error_msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Error in &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; block[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;]

    &lt;span style=&#34;color:#75715e&#34;&gt;# check block hash&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; block[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hash&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; hash_sha256(block[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;]), error_msg

    &lt;span style=&#34;color:#75715e&#34;&gt;# check block indices&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; block[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; parent[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, error_msg

    &lt;span style=&#34;color:#75715e&#34;&gt;# check previous hash&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; block[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;previous&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; parent[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hash&amp;#39;&lt;/span&gt;], error_msg
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# validate all transactions&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; transaction &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; block[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transactions&amp;#39;&lt;/span&gt;]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; check_transaction_validity(transaction, state), error_msg
        state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; update_state(transaction, state)
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; state
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_chain&lt;/span&gt;(blockchain):
    state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; transaction &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; blockchain[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transactions&amp;#39;&lt;/span&gt;]:
        state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; update_state(transaction, state)

    parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; blockchain[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; block &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; blockchain[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]:
        state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; validate_block(block, parent, state)
        parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; block

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; state

check_chain(blockchain)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;{&#39;Person_1&#39;: 94,
 &#39;Person_2&#39;: 107,
 &#39;Person_3&#39;: 145,
 &#39;Person_4&#39;: 55,
 &#39;Person_5&#39;: 99}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Feasibility study with sentiment analysis and voronoi</title>
      <link>https://subedi.ml/posts/feasibility_study/</link>
      <pubDate>Mon, 01 Oct 2018 06:10:01 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/feasibility_study/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Inclusive Newspaper</title>
      <link>https://subedi.ml/posts/inclusive_newspaper/</link>
      <pubDate>Wed, 08 Aug 2018 08:06:19 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/inclusive_newspaper/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Startup analysis using Seedstars data</title>
      <link>https://subedi.ml/posts/seedstars/</link>
      <pubDate>Sat, 03 Mar 2018 06:16:55 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/seedstars/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Birds, Plane, Superman</title>
      <link>https://subedi.ml/posts/bird_plane_superman/</link>
      <pubDate>Fri, 02 Feb 2018 10:09:16 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/bird_plane_superman/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Diffie-Hellman key exchange (and AES-256)</title>
      <link>https://subedi.ml/posts/diffie_hellman/</link>
      <pubDate>Fri, 12 Jan 2018 10:10:30 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/diffie_hellman/</guid>
      <description>&lt;h1 id=&#34;diffie-hellman-key-exchange&#34;&gt;Diffie-Hellman key exchange&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;(The introductory content is from wikipedia)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Diffie–Hellman key exchange is a method of securely exchanging cryptographic keys over a public channel and was one of the first public-key protocols as originally conceptualized by Ralph Merkle and named after Whitfield Diffie and Martin Hellman. DH is one of the earliest practical examples of public key exchange implemented within the field of cryptography.&lt;/p&gt;
&lt;p&gt;Diffie-Hellman is a way of generating a shared secret between two people in such a way that the secret can&amp;rsquo;t be seen by observing the communication. That&amp;rsquo;s an important distinction: You&amp;rsquo;re not sharing information during the key exchange, you&amp;rsquo;re creating a key together.&lt;/p&gt;
&lt;p&gt;This is particularly useful because you can use this technique to create an encryption key with someone, and then start encrypting your traffic with that key. And even if the traffic is recorded and later analyzed, there&amp;rsquo;s absolutely no way to figure out what the key was, even though the exchanges that created it may have been visible. This is where perfect forward secrecy comes from. Nobody analyzing the traffic at a later date can break in because the key was never saved, never transmitted, and never made visible anywhere.&lt;/p&gt;
&lt;p&gt;The way it works is reasonably simple. A lot of the math is the same as you see in public key crypto in that a trapdoor function is used. And while the discrete logarithm problem is traditionally used (the xy mod p business), the general process can be modified to use elliptic curve cryptography as well.&lt;/p&gt;
&lt;p&gt;But even though it uses the same underlying principles as public key cryptography, this is not asymmetric cryptography because nothing is ever encrypted or decrypted during the exchange. It is, however, an essential building-block, and was in fact the base upon which asymmetric crypto was later built.&lt;/p&gt;
&lt;h3 id=&#34;cryptographic-explanation&#34;&gt;Cryptographic explanation&lt;/h3&gt;
&lt;p&gt;The simplest and the original implementation of the protocol uses the multiplicative group of integers modulo p, where p is prime, and g is a primitive root modulo p. These two values are chosen in this way to ensure that the resulting shared secret can take on any value from 1 to p–1. Here is an example of the protocol, with non-secret values in blue, and secret values in red.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img.wonderhowto.com/img/26/30/63643739148390/0/generate-private-encryption-keys-with-diffie-hellman-key-exchange.w1456.jpg&#34; alt=&#34;title&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;imports&#34;&gt;Imports&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; primesieve &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; nth_prime
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; random &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; randint
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Cipher &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AES
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;key-sharing&#34;&gt;Key Sharing&lt;/h2&gt;
&lt;h3 id=&#34;public-numbers&#34;&gt;Public numbers&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# small prime number&lt;/span&gt;
g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nth_prime(&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;229
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# large prime number&lt;/span&gt;
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nth_prime(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;7919
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;alice-and-bob&#34;&gt;Alice and Bob&lt;/h3&gt;
&lt;h3 id=&#34;private-number&#34;&gt;Private number&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nth_prime(randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, p&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nth_prime(randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, p&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;49019
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;70639
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;public-message-transfer&#34;&gt;Public Message Transfer&lt;/h3&gt;
&lt;h4 id=&#34;alice-sends-bob-publicly&#34;&gt;Alice sends Bob publicly&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;alice_sends &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; g&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bob-sends-alice-publicly&#34;&gt;Bob sends Alice publicly&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bob_sends &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; g&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;shared-secret-key&#34;&gt;Shared Secret key&lt;/h3&gt;
&lt;h4 id=&#34;alice&#34;&gt;Alice&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;shared_secret_key_alice &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bob_sends&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;shared_secret_key_alice
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;7065
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;bob&#34;&gt;Bob&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;shared_secret_key_bob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; alice_sends&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; p 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;shared_secret_key_bob
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;7065
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; shared_secret_key_alice&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;shared_secret_key_bob
shared_secret_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  shared_secret_key_alice
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Both Alica and Bob now have the secret key, without compromising their private keys.&lt;/p&gt;
&lt;p&gt;DH is public key/asymmetric crypto but not encryption. For the demo, AES 256 (takes 32 bytes)&lt;/p&gt;
&lt;h2 id=&#34;encryption-and-decryption&#34;&gt;Encryption and Decryption&lt;/h2&gt;
&lt;p&gt;Changing the key to 32 byte (a bad hacky way)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(shared_secret_key)
key_bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zfill(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# The message should be a multiple of the byte size&lt;/span&gt;
alice_to_bob_original &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello world how are you&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zfill(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;))
cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(key_bytes, AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MODE_ECB)
cipher_msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cipher&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encrypt(alice_to_bob_original)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;cipher_msg is sent to the server, bob reads the cipher_msg and uses the secret key to decipher&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;decipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(key_bytes, AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MODE_ECB)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(decipher&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decrypt(cipher_msg))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;b&#39;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000hello world how are you&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;dh-is-prone-to-man-in-the-middle-attacks&#34;&gt;DH is prone to man-in-the-middle attacks&lt;/h2&gt;
&lt;p&gt;The Diffie-Hellman Scheme does not provide authentication of any kind. It only allow 2 anonymous parties to share a common secret. But for all Alice knows, she could be shaking hands with the devil (instead of Bob). This is why we need at least one party to be authenticated.&lt;/p&gt;
&lt;p&gt;For example: SSL (https), the webserver is authenticated using PKI (Public Key Infrastructure), and then a secure connection is established (D-H) between the website and the client. Since the website has been authenticated, the client can trust the website, but the website cannot trust the client. It is now safe for the client to provide his own authentication details on the webpage.&lt;/p&gt;
&lt;p&gt;For a practical answer if you are configuring your SSL/TLS server: you should use a modulus of at least 2048-bit, and a generator g such that the order of g is a prime q of at least 256 bits; alternatively, you may use a modulus p which is a &amp;ldquo;safe prime&amp;rdquo; (the order of g will then be either a very big prime, or twice a very big prime, which is almost as good). Some people feel safer when they generate their DH parameters &amp;ldquo;themselves&amp;rdquo;(*) instead of reusing existing values; if that&amp;rsquo;s what it takes to allow you to sleep at night, then do it.&lt;/p&gt;
&lt;p&gt;Elliptic Curve replaces primes with elliptic curve. The benefit is efficiency.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RSA encryption</title>
      <link>https://subedi.ml/posts/rsa_encryption/</link>
      <pubDate>Fri, 12 Jan 2018 10:10:30 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/rsa_encryption/</guid>
      <description>&lt;h2 id=&#34;rsa&#34;&gt;RSA&lt;/h2&gt;
&lt;p&gt;RSA (Rivest–Shamir–Adleman) is one of the first public-key cryptosystems and is widely used for secure data transmission. In such a cryptosystem, the encryption key is public and it is different from the decryption key which is kept secret (private). In RSA, this asymmetry is based on the practical difficulty of the factorization of the product of two large prime numbers, the &amp;ldquo;factoring problem&amp;rdquo;. The acronym RSA is made of the initial letters of the surnames of Ron Rivest, Adi Shamir, and Leonard Adleman, who first publicly described the algorithm in 1978. Clifford Cocks, an English mathematician working for the British intelligence agency Government Communications Headquarters (GCHQ), had developed an equivalent system in 1973, but this was not declassified until 1997&lt;/p&gt;
&lt;p&gt;A user of RSA creates and then publishes a public key based on two large prime numbers, along with an auxiliary value. The prime numbers must be kept secret. Anyone can use the public key to encrypt a message, but with currently published methods, and if the public key is large enough, only someone with knowledge of the prime numbers can decode the message feasibly. Breaking RSA encryption is known as the RSA problem. Whether it is as difficult as the factoring problem remains an open question.&lt;/p&gt;
&lt;p&gt;RSA is a relatively slow algorithm, and because of this, it is less commonly used to directly encrypt user data. More often, RSA passes encrypted shared keys for symmetric key cryptography which in turn can perform bulk encryption-decryption operations at much higher speed.&lt;/p&gt;
&lt;h3 id=&#34;imports&#34;&gt;Imports&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; primesieve &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; nth_prime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;rsa-algorithm&#34;&gt;RSA Algorithm&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Take two distinct, large primes p and q (Ideally these have a similar byte-length)&lt;/li&gt;
&lt;li&gt;Multiply p and q and store the result in n&lt;/li&gt;
&lt;li&gt;Find the totient for n using the formula φ(n)=(p−1)(q−1)&lt;/li&gt;
&lt;li&gt;Take an e coprime that is greater, than 1 and less than n&lt;/li&gt;
&lt;li&gt;Find d using the formula d⋅e≡1modφ(n)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point, the pair (e, n) is the public key and the private key (d, n) is the private key.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nth_prime(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nth_prime(&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; (p,q,n)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;29 47 1363
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;totient &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (p&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(q&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; (totient)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;1288
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;totient&#34;&gt;Totient&lt;/h4&gt;
&lt;p&gt;In number theory, Euler&amp;rsquo;s totient function counts the positive integers up to a given integer n that are relatively prime to n. It is written using the Greek letter phi as φ(n) or ϕ(n), and may also be called Euler&amp;rsquo;s phi function. It can be defined more formally as the number of integers k in the range 1 ≤ k ≤ n for which the greatest common divisor gcd(n, k) is equal to 1. The integers k of this form are sometimes referred to as totatives of n.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/9/9b/EulerPhi.svg&#34; alt=&#34;title&#34;&gt;&lt;/p&gt;
&lt;p&gt;The line on the top represents distribution of prime numbers. The phi of a prime number is simply the (n-1)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Phi function is multiplicative (for relatively prime numbers).&lt;/li&gt;
&lt;li&gt;Therefore, phi of A times B where A and B are prime is (A-1) times (B-1)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;coprime&#34;&gt;Coprime&lt;/h4&gt;
&lt;p&gt;In number theory, two integers a and b are said to be relatively prime, mutually prime, or coprime (also written co-prime) if the only positive integer (factor) that divides both of them is 1. Consequently, any prime number that divides one does not divide the other. This is equivalent to their greatest common divisor (gcd) being 1&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; math &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; gcd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;modinv&lt;/span&gt;(a, m):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, m):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;coprimes&lt;/span&gt;(a):
    l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, a):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; gcd(a, x) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; modinv(x,a) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; None:
            l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(x)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; l:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; modinv(x,a):
            l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove(x)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;coprime_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; coprimes(totient)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;secure_random &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SystemRandom()
e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; secure_random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choice(coprime_list)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; modinv(e, totient)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;685
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;private-and-public-key-pairs&#34;&gt;Private and Public key pairs&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Public key pair:&amp;#39;&lt;/span&gt;, e, n)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Public key pair: 1021 1363
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Private key pair:&amp;#39;&lt;/span&gt;, d, n)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Private key pair: 685 1363
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;test&#34;&gt;Test&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;e &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;1029
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;test&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;encryption-and-decryption&#34;&gt;Encryption and Decryption&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encrypt&lt;/span&gt;(msg, pub, pri, mod):
    chars &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ord(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; list(msg)]
    cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; chars:
        cipher&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(chr(char&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;pub&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;mod))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(cipher)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decrypt&lt;/span&gt;(msg, pub, pri, mod):
    chars &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ord(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; list(msg)]
    cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; chars:
        cipher&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(chr(char&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;pri&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;mod))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(cipher)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; encrypt(msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;, pub&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;e, pri&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;d, mod&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;decrypt(cipher, pub&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;e, pri&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;d, mod&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&#39;hello&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;python-library&#34;&gt;Python library&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; rsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Bob generates a keypair, and gives the public key to Alice. This is done such that Alice knows for sure that the key is really Bob’s (for example by handing over a USB stick that contains the key).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(bob_pub, bob_priv) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rsa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newkeys(&lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt;)
(alice_pub, alice_priv) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rsa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newkeys(&lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alice writes a message, and encodes it in UTF-8. The RSA module only operates on bytes, and not on strings, so this step is necessary.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello Bob!&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alice encrypts the message using Bob’s public key, and sends the encrypted message&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rsa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encrypt(message, bob_pub)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Bob receives the message, and decrypts it with his private key.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;decrypt_cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rsa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decrypt(cipher, bob_priv)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; (decrypt_cipher)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;b&#39;hello Bob!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since Bob kept his private key private, Alice can be sure that he is the only one who can read the message. Bob does not know for sure that it was Alice that sent the message, since she didn’t sign it.&lt;/p&gt;
&lt;h3 id=&#34;signature&#34;&gt;Signature&lt;/h3&gt;
&lt;p&gt;Suppose Alice uses Bob&amp;rsquo;s public key to send him an encrypted message. In the message, she can claim to be Alice but Bob has no way of verifying that the message was actually from Alice since anyone can use Bob&amp;rsquo;s public key to send him encrypted messages. In order to verify the origin of a message, RSA can also be used to sign a message.&lt;/p&gt;
&lt;p&gt;Suppose Alice wishes to send a signed message to Bob. She can use her own private key to do so. She produces a hash value of the message, raises it to the power of d (modulo n) (as she does when decrypting a message), and attaches it as a &amp;ldquo;signature&amp;rdquo; to the message. When Bob receives the signed message, he uses the same hash algorithm in conjunction with Alice&amp;rsquo;s public key. He raises the signature to the power of e (modulo n) (as he does when encrypting a message), and compares the resulting hash value with the message&amp;rsquo;s actual hash value. If the two agree, he knows that the author of the message was in possession of Alice&amp;rsquo;s private key, and that the message has not been tampered with since.&lt;/p&gt;
&lt;p&gt;This works because multiplication is commutative so {\displaystyle h=hash(m);(h^{e})^{d}=h^{ed}=h^{de}=(h^{d})^{e}\equiv h{\pmod {n}}} {\displaystyle h=hash(m);(h^{e})^{d}=h^{ed}=h^{de}=(h^{d})^{e}\equiv h{\pmod {n}}} Thus, the keys may be swapped without loss of generality, that is a private key of a key pair may be used either to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;signature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rsa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sign(message, alice_priv, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SHA-1&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;rsa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;verify(message, signature, alice_pub)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&#39;SHA-1&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;complete&#34;&gt;Complete&lt;/h3&gt;
&lt;p&gt;Bob and Alice generate a keypair and share public keys.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(bob_pub, bob_priv) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rsa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newkeys(&lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt;)
(alice_pub, alice_priv) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rsa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newkeys(&lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alice writes a message.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hey Bob!&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alice signs the message with private key&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;signature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rsa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sign(message, alice_priv, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SHA-1&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alice encrypts the message using Bob’s public key, and sends the encrypted message&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rsa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encrypt(message, bob_pub)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Bob receives the message and checks for authenticity using alice&amp;rsquo;s public key&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;rsa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;verify(message, signature, alice_pub)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&#39;SHA-1&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bob decrypts the message using his private key&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;decrypt_cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rsa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decrypt(cipher, bob_priv)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; (decrypt_cipher)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;b&#39;hey Bob!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;signature
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;b&#39;\x07Of\xabW^\x0b\xaeFh\x01L\xf3\x11\xe0\xe9\\\x99r\xc9\x1c\x044\x11\xfc{5\xa3_ \xeb\xba\xf8\x84b\x1e\xb7\xadK)\xdf\x9b\x8f|\xc4&amp;gt;\x89\x9d\xdf\x98OI\xc1\x87\xc2\xdd\xf3\xf6\x16\xae2`my&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>A brief history of Tootle</title>
      <link>https://subedi.ml/posts/tootle_history/</link>
      <pubDate>Sun, 01 Oct 2017 11:02:11 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/tootle_history/</guid>
      <description>&lt;h3 id=&#34;a-brief-history-of-tootle&#34;&gt;A brief history of Tootle&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-PdO1BY4SST8/WP6x0XBJKPI/AAAAAAAAHqc/UaCecAEMDYoe4D414rhzbgupbpk4n5XDwCLcB/s320/change-copy.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Hello World,
When Tootle started, there were four of us. At the time, we were working on EdCrayon (Three60’s Education and Classroom Management System). The development of EdCrayon was pretty much complete and one of the better schools in town had been implementing it for a year. We were busy with building fewer last minute requirements such as Nepalese school standard digital report cards and student ranking systems. After those were done and the academic session ended, we were preparing for the next academic session and we were also in talks with several schools for implementation of EdCrayon.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://princihere.files.wordpress.com/2016/10/androiddevices.png?w=456&amp;amp;h=393&amp;amp;zoom=2&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://princihere.files.wordpress.com/2016/10/androiddevices.png?w=456&amp;amp;h=393&amp;amp;zoom=2&#34;&gt;https://princihere.files.wordpress.com/2016/10/androiddevices.png&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, because of earthquake of 2015, the school that were lined up decided to back out and use their EdCrayon allocated resources on repairing the infrastructure damages. We would come to work and not feel productive at all. Due to the sheer boredom at work, we started researching on several ideas including location based services. One of the very first ideas was to create an app that would allow users to track location of Sajha buses on Google Maps so that they could plan on leaving offices/homes by referencing estimated time of arrival provided by the app. Even though Sajha buses were comparatively convenient, the problem was that people had to wait for the buses, generally up to half an hour,  since bus stops arrival timings were more or less random.  We developed the prototype for a Sajha bus route but since Sajha bus did not show any interest we decided to move on to other ideas.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-LUNyxO3d1Do/V_SwqMqhWwI/AAAAAAAAFa4/koo69yvCxmkgOBKS4ilOyneOA94iMAQkQCLcB/s640/Screenshot_2016-01-26-07-23-09.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Meanwhile, I was researching on asynchronous API calls for a pet project of mine. I had been trying to figure out the best way to sync client’s on-device offline database and off-device master database. In this process, one of the first things that I did was to look into creating my own implementation by syncing Android SQLite database with MySQL database. Up until this point, when ever client sync was required, I would simply clear out the content adapter’s list, remove all elements, get all elements from master server and refill the adapter. This allowed for easy implementation. However, even if nothing was changed in the client database, whenever the client hit the sync button or pulled to refresh, the process would get repeated. Basically the question I was trying to answer was,
“Is it faster and less expensive to individually assess for updates by comparing updated_date and id or to simply truncate and refill?” During the research for this, I stumbled upon newer technologies that would allow setting up changes listeners on client’s devices to refresh the changed list without having to trigger an action to sync the data. Using this finding and our research from location based services, we felt comfortable tackling the idea for a ride sharing application from a technological perspective, and Tootle was born.
Tootle was not Tootle from the very beginning. We continued our research on appropriate Business Models, Brand Positioning, Business Strategy, and Marketing and Delivery. Based on the changes in how we were going to position our brand in the market, we changed the product name from CabIO (digital cabs), KAR.ma (share your ride for karma), Bzuli (environmentally conscious ride sharing) and finally to Tootle (a fun way to travel without restricting the service to electric vehicles and only four wheeled vehicles). In the meantime, based on the Business Models and Brand Positioning, several elements of the app were also changed.&lt;/p&gt;
&lt;p&gt;Although the concept of ride sharing is not new, and several companies such as Uber, Lyft, Ola and Go-Jek have implemented it tremendously well, Tootle is different mainly due to three core elements. First of all, we let our partners decide if they want to take a ride, i.e, we introduced the idea of casual Tootle partners. For example, a partner A can decide to give rides throughout the day and make this his/her full time job or simply give rides that matches his/her travel itinerary. The technology is adjusted in such a way that a tootle ride requests are sent to several partners within a vicinity rather than just one partner. Unlike aforementioned companies, there are no penalties involved for not taking a ride. Secondly, albeit not completely by choice, we have realized that frugality invites creativity. At every step of technology development, we have had to strategize inexpensive yet effective ways to solve problems. Although we are still purely in development phase as of today, I believe we can really take pride in what we have accomplished given the resources. This is also reflective in the product. We were forced to think about minimizing data consumption (given the high data cost in Nepal) and poor internet infrastructure. Currently, on average, a particular ride for a partner in terms of data exhausts 1 MB while him/her being able to log in, select appropriate ride, complete the ride and get paid, while the backend collects ride information such as timestamps for actions and exact route followed. This costs him/her 50 Paisa which is approximately $0.005. Finally, last but not the least, the major difference comes in the form of technology adaptation, contextualization and more importantly, communication. Kathmandu is traditionally more or less a close-knit community where people prefer talking to people to garner a sense of confirmation and safely. Therefore, it was crucial to build a simple and clean UI that gets the job done and focus massively on developing technologies that provided real time ride statistics to our team at call center so that they could assist people giving and taking Tootle rides. Similarly, since digitization of payment was essential but Nepal is not ready for secure and realtime credit card transaction, apart from local third party digital wallet integration we also have QR top-ups. To summarize, although from the surface, Tootle is a ride sharing application like Uber, it has established its own identity via contextualization of the requirements of Nepali needs. This is apparent throughout the technology.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tootle Today&lt;/strong&gt;
From our experience, we have realized that market drives technology and not the other way around. We have also realized that although technology is merely a facilitator, it can do wonders to solve problems and invoke habit changes if done correctly.  Now, we have a multidisciplinary team of 15 striving to make Tootle technologies and services better each passing day with the goal of doing it correctly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learnings from Tootle</title>
      <link>https://subedi.ml/posts/tootle_learnings/</link>
      <pubDate>Sat, 28 Jan 2017 13:12:41 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/tootle_learnings/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-xoX-IvzEIrQ/WABs5p6To1I/AAAAAAAAFrs/IWVJmZ1RCtMsuxGVD9tBO_he__--YMo-QCLcB/s320/client%2Bcopy%2Bcopy.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tootle.today/&#34;&gt;Link to Tootle Website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tootle is a ride sharing service that matches bike riders and commuters. While the concept is not new, there are several contextualization factors that makes it unique. As research and development engineer and lead software developer, this was my biggest challenge to date and I learnt a lot of things. However, since we worked in a very small team, I occasionally came across problems related to branding, client relationship, marketing and overall B2C business model. This blog post will dive into those learnings rather than focus on technological implementations. To summarize the entire post, it is about my journey from a single dimensional software developer to a software developer who also understands project management, human resources, market, competition, branding and plethora of other factors that a software developer whose long term goal is to become a tech entrepreneur needs in their arsenal.&lt;br&gt;
Start small, &lt;a href=&#34;http://www.rome.com&#34;&gt;www.rome.com&lt;/a&gt; was not built in a day
This is trivial for most people, but not for me. There were times I was so focused on completing a task that I lost the bigger picture. Breaking down a task into smaller subtasks and solving them as soundly as possible is the key. Also, when you push yourself too hard, you miss small details that might have huge consequences in the future. Think scalability while solving little problems. Like Will Smith said, &amp;ldquo;You don&amp;rsquo;t set out to build a wall. You don&amp;rsquo;t say &amp;lsquo;I&amp;rsquo;m going to build the biggest, baddest, greatest wall that&amp;rsquo;s ever been built.&amp;rsquo; You don&amp;rsquo;t start there. You say, &amp;lsquo;I&amp;rsquo;m going to lay this brick as perfectly as a brick can be laid. You do that every single day. And soon you have a wall.&amp;rdquo; Also, Hofstadter&amp;rsquo;s law will come along to shatter all your to-do plans for the day. It&amp;rsquo;s just the way it is. Deal with it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-Lk7I4HamgPU/WACFovpy-MI/AAAAAAAAFr8/LpuH3ASDSr0wCiVsi0BonqIXJ8pNVJGRACLcB/s640/chicago-used-2__large.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Development and design is an iterative, never ending process. It is not a sprint but a marathon.
Seeking perfectionism hurts. First of all, there is no perfect code or design. There might be something that looks, feels and works great today, but it is never going to be perfect. You will always have to come back to that line of code, redesign that slider that looked great once upon a time and continuously update based on user feedback. Coding is a little of writing code and a lot of maintaining it. You are never really done. Project preplanning and risk management might help with not having to go back to drawing board again and again, but development and design is very much an agile process.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-hbPfWCuBPDU/WAC67Mu7hjI/AAAAAAAAFsM/siEA9pK5dIcN4Fi7f77l2ECePKVSRDREACLcB/s640/Untitled-1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Hire people who love what they do and love learning
Coworkers become your second family. During the course of Tootle development, I actually spent more time with my coworkers than my family.  Fortunately, everyone involved with Tootle are very passionate, hard-working and motivated people who never shy from learning. Also, certain characteristics such as being ardent, an embodiment and advocate of the product, and hardworking are more important than being skillful. I was also on the hiring team and I made sure to look for these characteristics. After all, Leicester City won 2015-2016 Barclays Premier League primarily because of their team spirit.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-MgSmVKnBG6E/WADATaZCg8I/AAAAAAAAFso/s7XZFY3qo8YEvTTLx849gULxVczPL2JBgCLcB/s640/IMG_20160803_034012.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Prioritize what is important
There will be a lot of bugs. Code related stuff aside, there will also be several things that need attention. However, time is limited. At times you could be in front of your computer debugging for hours and hours, but still the issue tracker list and crash reporting list will be full. Therefore it is necessary to prioritize based on impact level. Assessing impact of a particular task can be difficult. However, if you have an awesome team, it is just a matter of discussing from a business and technical point of view. Also distinguishing between bugs, enhancement, improvement proposal and task is very important.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-R4umTfdBp5I/WADEcT34m5I/AAAAAAAAFs0/Spcrbd31xgwMAEOpzQUN_dpgqm0AM8DJQCLcB/s640/Screen%2BShot%2B2016-10-14%2Bat%2B5.25.10%2BPM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Communication solves 95% of all problems
Communication is the key. Often during the day, talk to coworkers about the problems that you are having. First of all, when you explain the problem to someone, you understand the problem better yourself. Secondly, you are also in sync with what problems everyone else is facing. Similarly, simply talking about work related problems, expressing how you feel about deadlines, doing risk analysis together, discussing business strategy together, communicating dissatisfactions etc. will help solve a lot of problems earlier. So, constantly take a break, look outside the window, get a glass of water and simply talk.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-HsYnKpgPHsg/WADJ8GgOX-I/AAAAAAAAFtM/KAKTeA7shkcuSpdYWCYNFDXgJIFau89kwCLcB/s640/IMG_20160610_123707.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Stress can be a catalyst if applied properly
This project was very much stressful. Retrospectively, it was supposed to be too because of its complexity. One of the things I really struggled with is handling stress. I have gotten better over the course of this project. However, I am still working on learning to change stress to a catalyst. I hope to become Arsene Wenger someday (giggles). However, I have learnt that if things don&amp;rsquo;t work tonight, you simply have to sleep over it. The freshness of morning solves a lot of problems.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-O_vPh17qjB0/WADQ7nuM8sI/AAAAAAAAFuI/NZ7piERzA-s2daUKxvRjAFdHk9deKo8HwCLcB/s640/IMG_20160916_181959.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-NjOsMilsicA/WADPc4iPTnI/AAAAAAAAFuA/4MXAY_3LQYsvGloIusf9xTy7j1-ciliGQCLcB/s640/IMG_20160630_123334.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;You could also just watch SRK dance in Hosh na khud kahi josh&amp;hellip;.&lt;/p&gt;
&lt;p&gt;Go running in the morning, be healthy
This one is self-explanatory. Run to remain stress free and healthy. I stopped running for a while because I was lazy. But, I was also lazy because I was not running.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-hqJRkJ3zMsc/WADVl2Az7OI/AAAAAAAAFv8/9rcEydolrfspR83o1PG7PM_cmBoxoHhEQCLcB/s640/IMG_20160505_062623.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Competition is good
While reading The Personal MBA by Josh Kaufman, I realized that having market competition is actually advantageous. This concept was really counterintuitive to me previously. Competition is good because it implies higher probability of fulfillment of something known as the Iron Law of Market. It basically means that like you, other people have also seen the availability of the market you are targeting. Similarly, there is a lot to learn from your competition. Learning and applying the principles of game theory helps a lot too.
Awesome tech implementation is second to client&amp;rsquo;s requirement
You could spend weeks and months on awesome, flawless and amazing features that your clients don&amp;rsquo;t really care about or half an hour on simple features that makes all the difference to them. For example, adding a bitcoin as payment system would be cool, but allowing a female client to select a female driver makes the product secure and also adds marketing and advertising weight.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-fxSXJWd4UB8/WADoBxzEHWI/AAAAAAAAFwo/sdGRY963BeI7n1JlhALZLyFUsgngI8FNACLcB/s320/opengraph.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Beta tests are really really really important
You could sit hours upon hours, days upon days trying to find and fix all the problems. But, finding problems is more difficult once you know your product inside out. You are in a controlled office environment with fast internet, limited real test devices and a clear understanding of product workings. There is no way for you to find all the problems. The solution is to find real users to test, use and provide feedbacks. Canary tests and beta tests are therefore very important.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-xKUeEk1hM9k/WADh-E7zfzI/AAAAAAAAFwU/Ud6JiIQ19jUvBahjniooj6PV1NPoLJFAwCLcB/s320/264d35bbe2af57848d1759f2c38381de.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Just because you like it, does not mean users are going to like it also
You might absolutely love your product. However, it does not mean every user will like it also. Be prepared to get bad ratings. Also, they are not wrong to dislike something you adore so much.&lt;/p&gt;
&lt;p&gt;Previous projects and keeping up to date with latest technologies help a lot
I really believe this one is a biggie. Regardless of whether or not a product succeeds, it is always a stepping stone for future products. This product would not have been possible or would have been terribly difficult without Edcrayon, Edquake, and dozens of other location related prototype. When prototyping, research on newer stacks and practices.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-LUNyxO3d1Do/V_SwqMqhWwI/AAAAAAAAFa4/koo69yvCxmkgOBKS4ilOyneOA94iMAQkQCLcB/s640/Screenshot_2016-01-26-07-23-09.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the end, revenue matters the most
In the words of Josh Kaufman,
Do not be a &lt;strong&gt;mercenary&lt;/strong&gt; since dedication in craft, patience to find right market to be dedicated towards and consistency is required to eventually make money.&lt;/p&gt;
&lt;p&gt;Also, do not be a &lt;strong&gt;crusader&lt;/strong&gt; since you need money to pay the bills.&lt;/p&gt;
&lt;p&gt;Wish us good luck with our tootle journey.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-2pcq_NaTEPc/WADmug3aiHI/AAAAAAAAFwg/tXWl4D7WPvMpLZXT9EX2FjwDK21Y1h6aQCLcB/s640/driver%2Bcopy.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Edquake</title>
      <link>https://subedi.ml/posts/edquake/</link>
      <pubDate>Sat, 22 Oct 2016 04:01:02 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/edquake/</guid>
      <description>&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-F9T_4XWrLWI/V_Mq01LcubI/AAAAAAAAFWs/R9b8VPWqyYQJF6Zc8VfXMK4XJBj5avpGwCLcB/s1600/app_icon.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The objective of the game was to use texts, audios, videos, badges, quizzes, points, stories and characters to educate users on preparation for earthquake and decision making during and after earthquake.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/WqtzEdJfNSNT2C5SwfFDEtKsU5Lrk0xKLHIovgFJkYGAQrTQ1pjxhA7UlnSKJEO0Ul2eyT_n2-DIzKxULxlZhsgbzd2Sb4rPxhnO0Hylj3ABLyZmJZJ9tzfh1uEZCJf6_9FIp2P5&#34; alt=&#34;introvideo.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Before the game starts, a teaser video is played where an event of earthquake is shown inside a home scenario. The video is shown in order to reflect the importance of earthquake preparedness. The video can be skipped the next time as per the choice of the player.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application Home Screen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The application home screen allows users to start a new game, resume from where they left off previously, change game settings such as sound and language settings and submit their score to leaderboards, and quit the application. It also displays current user name and character selection along with all the badges that the user has won.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/oIWHVynC4ePa3xCN8XG2elUGZ2-eq_u-6Qd5ZANZfQo2ap4yVL991phcz0fV59erHbTVwZvIP2Dpq1GMEfO_77NyfpUrCuZso5nqEZUig0sSZyWG2MIVb42yIOQwxj1GxWlS33WP&#34; alt=&#34;home.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Starting a new game&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Upon starting a new game, a dialog appears where the user enter his/her name and selects a character. The user can choose two characters that of a boy or a girl in order to play the game. These characters will also act as protagonists in animated stories.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/3I7fr1MuTdBwWjHG61LegJ2uMSqIVQO71Pp-EE84EZGyqU-UasbGVJRlIbYt-iZW6RVRC5TE5iNMZ1DWA_1iwZ2xh6y__63LiPx02w3Ip8ysWyy5XcVqKBILCxmOmu2tW-aDvW8A&#34; alt=&#34;newgame.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Badges&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Badges are provided to users upon completion of a milestone or a level. The badges provides an incentive for the players and makes the game more engaging and interesting.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/FwUlooxiHXdSxTRwmtWRoAxYVFopXNKXysDfClxWAtzNys-RfmSHimhcSr9ydO6uBa582vDP8sxRSXoT52nLzdt7s7Jcatt8IJ3wpGHMdOX93daCwnw57cUbOKy2UfltYMyKONE&#34; alt=&#34;badge.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PSA and Video Activities&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Engines have been setup to support audio and video activities.&lt;/p&gt;
&lt;p&gt;The radio can be used as an informative element in the game. For example:&lt;/p&gt;
&lt;p&gt;A PSA for earthquake preparation informing about vital items one needs in their emergency backpack can be played in the radio.&lt;/p&gt;
&lt;p&gt;The video platform can support a series of storytelling addressing to different type of circumstances and safety tips regarding the effects of earthquake. Nepali subtitles also appear on the bottom of each videos.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/CluwZbm53BdQ5boMC6g36wFSWbL8owIk5NFhJLZ0PIwaxypkCHJ3A3wAxegXkAqeLslaGhurVzBn6R3eERk38RvI-xCm5Z5Q9GSlTAhMOzEaEglTc3ufHC7NnGaxqvbxGmEJXojl&#34; alt=&#34;video.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh4.googleusercontent.com/8Tjm-tIquE2X07NVwO5XEqe3fhNAGyBHZojpL_60QmgmTdU4nyV3fLSKuCzAuLuYMiMAaXBnxDlY66aLckRA2Yp5QHXKBuaA3jYOL3fKNojx3QDBquuD_qHt8mYKUwnec6G6OmM&#34; alt=&#34;psavideo.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Drag and Drop Activity&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Engines have been setup to support drag and drop activities.&lt;/p&gt;
&lt;p&gt;Based on this drag and drop engine we have developed relevant games. For example:&lt;/p&gt;
&lt;p&gt;Preparing a GoBag&lt;/p&gt;
&lt;p&gt;Following the PSA, the users are required to drag and drop items from a set of vital items (such as first aid kid) and useless items (such as toys) to their backpack. Since the backpack can only hold a certain number of items, the users will have to optimize for best preparation. Upon completion, the app lets the users know if their selection is correct.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh4.googleusercontent.com/69MzYc05ZZG6yu7HKm9y6tR4MxwHV_aX3OflB803ZHcwp2xah2y6g_ajm4HsVMJkhBEAhxUYS_HATvPaaNOqLu1pK3loLH2zKs1xLnIxNByKnkUJWQHfVb_WbUPQstzYb-Q59hIT&#34; alt=&#34;gobag.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh4.googleusercontent.com/ai4GfFjSUQAYClVGGIWva3oVp2JqHBU5-xff1G_-QOkhotg9rIszF6FlIB0XsJT-X2mtIVg7FHg1niPHCwdZ6IZjgCXH0vcuTUeZJ31VhDGzm0PLuFdWxArWjd9ADQ3mZ4hd38dy&#34; alt=&#34;resultgobag.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Similarly, the app will let the users know if their selection was wise. In case of wrong selection, the app will also let the users know why their selection was incorrect. Unlike other quiz activities, the difference here is that the users will still be allowed to go back to change their answer. The rationale was to follow a formative teaching approach.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quiz Engines&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Engines have been setup to support quiz platform.&lt;/p&gt;
&lt;p&gt;Quizzes produces better organization of knowledge by helping the brain organize material in clusters to allow better retrieval. It also identifies gap in knowledge and lets people know what is learned and what is not.&lt;/p&gt;
&lt;p&gt;The quiz engines supports quiz games which can be very informative. The answers chosen can also lead to some consequent information or videos later.&lt;/p&gt;
&lt;p&gt;There are four different types of quiz questions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Grid Select&lt;/li&gt;
&lt;li&gt;True and False&lt;/li&gt;
&lt;li&gt;Multiple Choice Questions (3 Options)&lt;/li&gt;
&lt;li&gt;Multiple Choice Questions (4 Options)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first two types of questions carry a marking rubric of 200 points. The user receives complete points if he/she answers it correctly in the first go. The point a user can collect from each quiz is reduced depending on the number of mistakes.The third question carry a marking rubric of 300 points and the fourth question carry a marking rubric of 400 points. Similarly, depending on the mistakes, the point is reduced. The result is displayed with additional tip information and graphics.&lt;/p&gt;
&lt;p&gt;Example 1: Grid Quiz Activity&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/2ITZwj6fUgwu7Bb_0ec0g7LEhNe5Z6P_Dkt_a-5xvZm7gazrRyh1sQodr_FjWMkF4w2qJJ0XwFDIQonMOeM3QgsuC1XsPnhjvnVyboTmp9IYhQ-tx7z_Fjc8MNcZ2WLvNPq4Sz_N&#34; alt=&#34;gridquestion.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh4.googleusercontent.com/WztWvUAaXPQwn5Rcqk-d_o4XxU3ork_zpLHbg2oXRMw3ZfOcC7ewHhw1D9sVIOb-Kfc2F6JYTUYl4GSMB02sdYc33mJBgvEmmIecn6TQ3VXKHg29bQF8WfkxmrsdpqXY_tkwc9ad&#34; alt=&#34;gridtip.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Example 2: Multiple Choice Quiz Activity (3 options)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/WZVvS4rQXp6qCbO6thPJiltwl_KnZznBWIQEf8iI7Q5uSStg7SuKkPVNCJSP4GKH_ne0b91_wT4Go27TBOf_uSNxooxQz2_nOtJaRKcHvN2kuAHvbefBn-YW7f1PFFxI2I-N84dE&#34; alt=&#34;quiz3.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/wdafblASu42lSEY-50jES3O35KGUhWb8CA0VN4vj8n_QBameDsFpHIM26hY79H01bWdj9KnQKp8BcynerxGfsnBqj3gH__hSLWgbkrBwI_h8N3yb7DgB5LVHo22F1k_eswKxowWd&#34; alt=&#34;tip.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Leaderboards and Facebook sharing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The application will allow users to submit their points to a global leaderboards system. This will allow users to compete with other players.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/UCWt40HM_5shPllWkHS_AZlZo8GSZN7TsxCM-LPO8FWgA675PHU28BN6Rr1e11gPpV4jdqarUZ7lGnUUnuJWmlkeL2X3FaXf7njPOTIHfqoU1nDDxlAwL2N7fdwOlPcSI7icXd1O&#34; alt=&#34;leaderboards.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-uwmYsHlEUBc/V_OBYKgYBEI/AAAAAAAAFXQ/Pf3ySXoIIlw832JDTGFat0HvIyauso3mgCLcB/s640/initiativeshare.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Edcrayon</title>
      <link>https://subedi.ml/posts/edcrayon/</link>
      <pubDate>Mon, 01 Feb 2016 02:21:02 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/edcrayon/</guid>
      <description>&lt;p&gt;Edcrayon’s &lt;strong&gt;Universal Deployment Model&lt;/strong&gt;, converts tablets or phones to a smart, self-paced, predictive learning environment. It packages the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thousands of qualitative educational content that students can browse from and download for offline use.&lt;/li&gt;
&lt;li&gt;Gamified and engaging UI to make sure students love learning from the application.&lt;/li&gt;
&lt;li&gt;Serves as supplement to topics being taught in school or simply for self-study.&lt;/li&gt;
&lt;li&gt;Available in different languages to facilitate mother tongue learning.&lt;/li&gt;
&lt;li&gt;Learning materials is localized and contextualized too.&lt;/li&gt;
&lt;li&gt;Provides practice lessons and quizzes auto-graded by the application so that the students can work their way through the assessments as in self-paced learning.&lt;/li&gt;
&lt;li&gt;Features quiz engines that adapts to students previous knowledge on a particular subject material. If a student struggles with a specific type of problem the application will generate more questions of similar type.&lt;/li&gt;
&lt;li&gt;Provides performance charts and allows students to track their own performance.&lt;/li&gt;
&lt;li&gt;Facilitates discussion forums to allow students from different places to discuss and share ideas.&lt;/li&gt;
&lt;li&gt;The performance data will also be sent to regional or central data repository for analysis purposes. The data will help decision makers to facilitate better or different features and contents to ensure more productivity and performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Current challenges in education&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Delivery of published books to every part of the country has been a significant problem due to the expenses involved in publishing and also due to the lack of road infrastructure.&lt;/li&gt;
&lt;li&gt;Even in cases where books are delivered on a timely basis, it only facilitates traditional teacher-centered teaching pedagogy. Twenty first century education calls for individualized learning which cannot be achieved since published books are not tailored to learners specific needs. Not all students get the optimum learning value from text based materials alone.&lt;/li&gt;
&lt;li&gt;Several schools have a large teacher to student ratio. Teachers also invest a huge portion of their time on things like keeping comprehensive performance records of every student, preparing and keeping track of lesson plans, and various other administrative tasks. If a system aided the teachers with these mundane tasks, the time saved can instead be utilized for student teaching and classroom engagement. Individualized attention can be provided to the students even in classes where the ratio is high.&lt;/li&gt;
&lt;li&gt;Decision makers in schools do not have all the performance data of all students and/or teachers at all time. A quantitative analytical report of performance with historical data assists in decision making processes.&lt;/li&gt;
&lt;li&gt;Schools still follow standardized and summative assessment system. This is partially because the system is inherent in us. However, we believe that the main reason is simply logistical. Large student size, lack of formative assessment tools, lack of engines to create individualized assessment etc. are some contributors.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use of technology in education can facilitate myriad of tools that help in solving the challenges. Edcrayon facilitates easy delivery of qualitative media contents, smart algorithms and/or modules that allow for individualized learning via tailored content pushing and group creation, self-paced learning, smart performance charts, and formative and summative assessment models.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-eXZ9VM-OWZM/V_MVakbmxDI/AAAAAAAAFUg/EfhsVuZsws0Zw-ftKJA021kg_xIaoGt7wCLcB/s640/Picture1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Currently, private schools have benefitted from Edcrayon’s &lt;strong&gt;Classroom Deployment Model&lt;/strong&gt;. This deployment model converts a traditional classroom environment to technology based, student-centered model. It packages the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Constitute all the elements of &lt;strong&gt;Universal Deployment Model&lt;/strong&gt; with an addition to a guided learning and teaching environment.&lt;/li&gt;
&lt;li&gt;Replaces the traditional learning and teaching classroom environment to a student centered, formatively assessed, skill based, interactive learning and teaching environment.&lt;/li&gt;
&lt;li&gt;Rather than learning at their own pace, which has its own merits, this approach allows students to communicate and learn from teachers and other students in the classroom.&lt;/li&gt;
&lt;li&gt;Facilitates teachers with student performance charts.&lt;/li&gt;
&lt;li&gt;Allows teachers to assign tailored materials for more individualized learning approach.&lt;/li&gt;
&lt;li&gt;Facilitates formative and Inquiry based assessment through continuous feedbacks from teacher and other students.&lt;/li&gt;
&lt;li&gt;Performance data of students and teacher are available to decision makers.&lt;/li&gt;
&lt;li&gt;Government proposed Continuous Assessment System is implemented.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Makes it very easy to perform day to day tasks such as attendance, register keeping, etc.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-qF84ESiz8oE/V_MVyl9kXkI/AAAAAAAAFUk/BuinU2WVf5EvSO0RQvXFSP2HsXh-ObyjQCLcB/s640/Picture1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Some Screenshots of Android Application:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-C8883IR1tcQ/V_MWU5VvStI/AAAAAAAAFU0/z6aN0vSudLond9e1Yog23Iq6AU0i5vCzQCLcB/s640/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-A4xB6ScPSKQ/V_MWVhGVVkI/AAAAAAAAFU4/u2iK9bFJgqc-InOsmsXPb20iPl9U9V4nwCLcB/s400/1a.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-wwFQ5yi-xUM/V_MWVz8Z0mI/AAAAAAAAFU8/45M7I4gL5w4tUmjUPbjk_GbZkECh1mipQCLcB/s400/1b.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-Y4XGMr31mh8/V_MWVxt3WLI/AAAAAAAAFVA/e5ONdON2GNkUvx2xyDUGuvGtbzWdvmSdwCLcB/s400/1c.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-g13-VYs9eFM/V_MWWvSXWmI/AAAAAAAAFVE/KDz9JvW_5qgyGP1y5vzsqcfNkUIHOg2hwCLcB/s400/1d.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-NqRBOXa3HDc/V_MWWnUBQHI/AAAAAAAAFVI/CYo0z_s6IKc4gyhnvWhBlXZHGoxTsOiEgCLcB/s640/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-AT1VQ1zweWM/V_MWW8KJ25I/AAAAAAAAFVM/JDZ9JV4SWxQ91k90FT4ZksdQ0Jnev-bLQCLcB/s640/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-Xm78ERg-zsI/V_MWXaKdeyI/AAAAAAAAFVQ/Pxb6-EjEgMAV_uCyDHq8YLqvyVh5mpT7ACLcB/s640/4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-4ICUopDvz1Y/V_MWXvV1g6I/AAAAAAAAFVU/ueQXICt2acAGA_6f1birVx3WwHeXUQY3ACLcB/s640/5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Some Screenshots of Web Application:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-Q2BQPkFvWc8/V_MWZs4_JkI/AAAAAAAAFVs/WO-dChISlU0Zo2EeQufDEmIptZKYckatwCLcB/s400/AdminclassroomManagement.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-QzFNzJgA8Hg/V_MWXzZcb2I/AAAAAAAAFVY/q3TG7rqZ-M8RkMo5Z3QPdyn2kj0LM4CLQCLcB/s400/AdminHealthManagement.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/--9mIhWMeG24/V_MWYT67p-I/AAAAAAAAFVc/fYhJ8xYXxKwKp_IZrRDX-DGq5nSYgcSBQCLcB/s400/AdminUICharts.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-unOE-mQha9o/V_MWY5LWPyI/AAAAAAAAFVk/pBRnQDkyQNoxKyxh4ylgHJByCBey7CbSQCLcB/s400/AdminUIClassroom.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-J219JDo0oqc/V_MWYy6m5fI/AAAAAAAAFVg/2bopGIoeHg8oZPqK1ICViVY1heldu9TFACLcB/s400/AdminUICourse.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-_Lzsf25EnhA/V_MWZDW11YI/AAAAAAAAFVo/UjGDs-3w5ZMe1KGRhxNh2quTDtsdXrkEACLcB/s400/AdminUserManagement.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;My role of R&amp;amp;D engineer and Project Lead incorporated architecting overall logic and process flow of Administrative and TeacherUI consisting User, Content, Classroom, Health and Pedagogy Management System. I also designed and co-developed EdCrayon Android application incorporating offline services, interactive charts, formative pedagogy, quiz engines among other features. Additionally, I developed several database administrative tools, wrote several crons and selenium test scripts, and managed multiple school servers. Similarly, I also trained and mentored junior programmers in programming methodologies and best practices. Additionally, I was also involved in training teachers, school-coordinators and school principal to use EdCrayon. Apart from my primary focus on technology, I also served as a core group member in defining and prioritizing technology investments and business objectives.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prototype samples:&lt;/strong&gt;
&lt;a href=&#34;https://drive.google.com/open?id=0B-XDuviH5KgwRmh4RExXOXZiUEE&#34;&gt;Sample 1&lt;/a&gt;
&lt;a href=&#34;https://drive.google.com/open?id=0B-XDuviH5KgwUkw2U0IwazU5VUE&#34;&gt;Sample 2&lt;/a&gt;
&lt;a href=&#34;https://drive.google.com/open?id=0B-XDuviH5Kgwbm9JU1dGZ3NmM28&#34;&gt;Sample 3&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Etymology and Ngram</title>
      <link>https://subedi.ml/posts/etymology/</link>
      <pubDate>Fri, 01 Jan 2016 03:11:02 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/etymology/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-27bPJS8zz2U/VoYeWiH1_KI/AAAAAAAADls/jICpVOc5TgI/s640/device-2016-01-01-120842.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-6Xv1iQcDotc/VoYeXNoE2hI/AAAAAAAADl0/G4zmm32fYlA/s640/device-2016-01-01-120905.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-ea19AL8mOfE/VoYeW9Uo0VI/AAAAAAAADlw/6RkqkRfgaJU/s640/device-2016-01-01-120925.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-gs3TAlYHfVg/VoYeXhZA5tI/AAAAAAAADl4/UgtYJvD8vwg/s640/device-2016-01-01-120949.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-GSujGmWfm54/VoYeYlB6lvI/AAAAAAAADmA/Gh_xPB8BBa0/s640/device-2016-01-01-121445.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-VOXTeCw9gdE/VoYeY6DDGYI/AAAAAAAADmE/7ivZxz8Hl0o/s640/device-2016-01-01-121557.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-lPqt7XqUuQ4/VoYeZpvYGzI/AAAAAAAADmI/iFzvhII5v7g/s640/device-2016-01-01-121745.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;It uses MPAndroidChart which allows users to scroll within the graphs too.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-361ntSWDTWw/VoYeakNusJI/AAAAAAAADmY/6GmWF_C1fRQ/s640/device-2016-01-01-122005.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-_jzCIzggctw/VoYeaYUrOfI/AAAAAAAADmU/XG3vr349b3g/s640/device-2016-01-01-122031.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Neo-literacy app concept</title>
      <link>https://subedi.ml/posts/neoliteracy/</link>
      <pubDate>Thu, 01 Oct 2015 05:14:01 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/neoliteracy/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-EBh3SlPn8Aw/V_SzssccFZI/AAAAAAAAFbM/BsJ4tg8gw_8a54Xo2ZIlJ7gNjqoZEoa0QCLcB/s320/a.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Improving Literacy has been one of the biggest challenges faced by the developing world.&lt;/p&gt;
&lt;p&gt;United Nations underscored the importance of combating inequalities in education in its Sustainable Development Goals (Post 2015 Agenda) as the proposed SDG 4 suggests the international community to “Ensure inclusive and equitable quality education and promote lifelong learning opportunities for all by 2030”.&lt;/p&gt;
&lt;p&gt;In Nepal, the literacy rate for the total population is 57.4 % which shows that the inequalities still persist (CIA World Factbook). Significant portion of the population have been deprived of learning opportunities due to various reasons including early marriage, gender inequalities, social and family pressure to engage into economic activities at an early age etc. Research also suggests that in developing countries, there is very low self esteem among people who are illiterates or semi literates.&lt;/p&gt;
&lt;p&gt;In this digital world, they are even at greater disadvantage. Those with the least amount of schooling will find it increasingly more difficult to participate in the evolving knowledge-based societies, deepening the social divide (Reimers, 2000). There needs to be an innovative approach to match both the education and technological gap. Recent development in the mobile technology provides us with great opportunities to fill this gap.&lt;/p&gt;
&lt;p&gt;The mobile devices offer both affordability and storage capacity which makes it possible to equip with different types of educational content. There are over 5 billion mobile subscribers worldwide today –an astounding number considering the world’s current population which is roughly 6.8 billion (ITU, 2010). The rapid proliferation of mobile technologies throughout the world has brought substantial attention to the potential to leverage the power of these new technologies to address decades old problems, including educational inequalities (see Keen and Mackintosh, 2001; Ling, 2004).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Product / Technology Concept&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The ICT tool (Android application) for the training will have different components for learning, assessments, data-collection and data-analysis. The idea is to make the application interactive and to reflect a game-environment where users will be motivated by game elements such as unlocking levels (lessons) as they complete certain tasks. The lessons will be based on the UNESCO’s newly-literate book (Mathani) for Awadhi language (Part-2). However, certain levels from Part-1 will also be added as a means to bridge their previous knowledge.&lt;/p&gt;
&lt;p&gt;Some of the lessons that will be included for the pilot are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Word formation&lt;/li&gt;
&lt;li&gt;Basic math (addition and subtraction)&lt;/li&gt;
&lt;li&gt;Paragraph reading&lt;/li&gt;
&lt;li&gt;Paragraph listening&lt;/li&gt;
&lt;li&gt;Word math&lt;/li&gt;
&lt;li&gt;Time/Calendar&lt;/li&gt;
&lt;li&gt;Filling forms, writing letters etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some forms of assessments/practice lessons that will be included in the pilot are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android drawing canvas&lt;/li&gt;
&lt;li&gt;Multiple choice questions&lt;/li&gt;
&lt;li&gt;True/False questions&lt;/li&gt;
&lt;li&gt;Filling in the blanks&lt;/li&gt;
&lt;li&gt;Writing lessons&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following user data will be collected within the application with the assumption that every learner will have a personal device to work on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User information&lt;/li&gt;
&lt;li&gt;Level progression data&lt;/li&gt;
&lt;li&gt;Demographic data&lt;/li&gt;
&lt;li&gt;Application usage data&lt;/li&gt;
&lt;li&gt;Performance data&lt;/li&gt;
&lt;li&gt;Location data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The data can be synced in real-time if Internet connectivity is not an issue. However, in places where connectivity can be a problem, or it is expensive, an alternative approach where data is synced periodically can be utilized.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-vhqPvZO2fGs/V_OkaQNcRII/AAAAAAAAFXo/SznggCL6His5uv4Zcoh2zfQ3kwobT5AMACLcB/s640/1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-fDdC85MlZ4s/V_OkXWL1grI/AAAAAAAAFXg/2M8WbXF28SU0GGdJlipR5p9i9ryVD_ClQCLcB/s640/2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-SNP0HYWPBFI/V_Okf01WBrI/AAAAAAAAFXs/TGKwPdGDvKYItPDPhXBwKSAv_AcpCBdnACLcB/s640/3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-rYgc7Yh_gGk/V_OkhJOegLI/AAAAAAAAFXw/C4DHM2yzgp0H0ImRla-ITfe29HK4N4OgwCLcB/s640/4.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-cUehi7I6bno/V_OkikCsz_I/AAAAAAAAFX0/k4IlhVNPHyIyhTSkrtY8ljepmgRCttasACLcB/s640/5.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-WI5BjKk5YhI/V_Okn9WAw1I/AAAAAAAAFX8/ncHqDAACOvokwPmsjflUiY9N1hbsJWChACLcB/s640/6.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-e_lvekTTlxM/V_Okmkzr_fI/AAAAAAAAFX4/nYVTNy_km3kYRwux8yyAKywBsKnSnmKzgCLcB/s640/7.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-DKyOlnVYIfM/V_OkwwRmY7I/AAAAAAAAFYE/EJn4QKRgEsQrKRn_PTxILfOEWiUgsmeQwCLcB/s640/8.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-rA69aY6q-xI/V_OkwhtJylI/AAAAAAAAFYA/LRt-sAWZ9kU0vVqWqR3hHcoz3BZ6HXaQQCLcB/s640/9.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-DZZ0fbDiU40/V_OkabJzIEI/AAAAAAAAFXk/OH2aej6XqMIPXO6O4b77Mzwu6-Dr6WeYgCLcB/s640/10.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Net Promoter Scale (NPS)</title>
      <link>https://subedi.ml/posts/nps/</link>
      <pubDate>Sat, 04 Apr 2015 04:01:02 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/nps/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-TYuOQ1UJLzE/V_PgIfgdzfI/AAAAAAAAFaQ/Z-fVeyyIQm4gG386D_AeGtlePk5LsJCBACLcB/s320/nps.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;I recently stumbled upon a customer loyalty measurement scale termed Net Promoter Scale (NPS in short) via a conversation with a businessy friend of mine who was researching on it. I was truly amazed by the simplicity yet brilliance of NPS. Moreover, this is ideal for someone like me who wants to get honest customer feedback without harassing them with poorly designed questionnaires regarding a product.
The pith of NPS lies in the question:&lt;/p&gt;
&lt;p&gt;“How likely is it that you would recommend our company/product/service to a friend or colleague?”&lt;/p&gt;
&lt;p&gt;Those who respond with a score of 9-10 are called Promoters, and are considered likely to show positive behaviors like repeat purchase and positive referrals. Those who respond with a score of 0-6 are labeled Detractors, and they are believed to exhibit the negative behaviors like driving away from the brand, negative referrals. Responses of 7 and 8 are labeled Passives, and their behavior falls in the middle of Promoters and Detractors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The NPS Calculation formula&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(Number of Promoters — Number of Detractors) / (Number of Respondents) x 100&lt;/p&gt;
&lt;p&gt;NPS ranges from -100 to 100 (inclusive).&lt;/p&gt;
&lt;p&gt;With me doing the charting part and my friend doing the result implication and significance part we developed a simple NPS calculator app that takes total detractors, passives and promotors to output NPS. Refer to the screenshots below to identify what different NPS score signify.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-yR9Uh-3fjtI/V_PdWVu4SsI/AAAAAAAAFZ8/-oIJzJLRZcosIJ0sq5pXI3dQY27A5QXaQCLcB/s640/device-2016-07-28-134536.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-CuzujNNn7h0/V_PdW0rI7iI/AAAAAAAAFaA/_VpTJjIk7bMbOC-OmfvJfJ-0LQQrwFp2QCLcB/s640/device-2016-07-28-134930.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-9LbkQR3dmIo/V_PdWO6Ze6I/AAAAAAAAFZ4/EHBiqOCcElkuDcyjjs7yxSXxEGPQ2y47QCLcB/s640/device-2016-07-28-135017.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-iYDH-ZWLyzg/V_PdXWu_eXI/AAAAAAAAFaE/u5T-JsYLZYIqGVolndwWWPW2WbGT4qlqACLcB/s640/device-2016-07-28-135116.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Swahili Phonics App with Stanford University</title>
      <link>https://subedi.ml/posts/swahili/</link>
      <pubDate>Mon, 02 Feb 2015 04:04:01 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/swahili/</guid>
      <description>&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-y96E-gUxTHg/V_OyFH5pvzI/AAAAAAAAFZQ/sJq-MsOyTbMDMekRrCQdvIo92hp5-zVXACLcB/s320/icon_big_green%2Bcopy.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;I had contributed as a debugger on Seeds of Empowerment&amp;rsquo;s Swahili Phonics application a while back. This blog post lists various test cases for Swahili Phonics Learning Application for identification of completed requirements and current issues. Thereafter, it also lists the problems that were solved.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. User interface and interaction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The application has great user interface. Since the majority of targeted users are young children, it is important to make learning fun. This application successfully does that. The only issue with the user interface is that it does not adapt to the full screen width.&lt;/p&gt;
&lt;p&gt;Expected screen:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-8v7fiTclh7k/V_OsRCdboeI/AAAAAAAAFYg/paCxr6YP5h4uCDdQKB-yphAjnPGJTKRQACLcB/s400/Picture1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Current screen:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;file://localhost/Users/mac/Library/Group%20Containers/UBF8T346G9.Office/msoclip1/01/clip_image004.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-5Tm4YQ-9JPc/V_OtD3a8yGI/AAAAAAAAFYk/2FX6DxQChkwdmO-SkZyxQUJAgs4CFib5QCLcB/s400/Picture2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Data collection&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The application collects all sorts of data from the players and stores it locally in the user&amp;rsquo;s device. The players can re-login using their user-name and password and the application allows continuation from where they left before. The application also stores every hits and misses of a user. Although not currently implemented, the data can be used for analysis purposes to identify things like what set of phonetic sound players mostly struggle with.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Algorithm&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Although the application provides a great framework for scalability, localization in different languages, and analytics there are few issues that we feel need some attention. We have been able to identify the following problems. We were not really sure if these problems were known since the realization came from analysis of the code rather than from the use of application. Therefore, we decided to list these problems with screen-shots so that it becomes more easier to understand.&lt;/p&gt;
&lt;p&gt;I) random number generation problem&lt;/p&gt;
&lt;p&gt;In the current implementation, random numbers help generation of correct and incorrect answer. However, correct answer is always selected from the current level the player is at but incorrect answer set is generated from level 1 through current level. Because of this, although the options will have certain phoneme that are from previous level, they will never be the correct answer.&lt;/p&gt;
&lt;p&gt;Some examples:&lt;/p&gt;
&lt;p&gt;If a user is at level 2, the correct option will never be from level 1. To generalize, if the user is at level n, the possible set of answers will only be from the phonemes allocated for that particular level n and not from any levels less than n.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-4kZPZ1Oj9FA/V_OtXaQ9McI/AAAAAAAAFYo/U7_EF5zVbDguuw2qmWANgcJpuZtRyr18gCLcB/s400/Picture3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this case, the answer only be “bo”, “be” or “bi”.
With progression of levels, it becomes more noticeable:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-gQxkkHxsUBs/V_OtuSpMGwI/AAAAAAAAFYw/77qh7ilu6fEv2LYTKy0Zbo7GRN0lW7uqgCLcB/s400/Picture4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here the possible answer is only one (ie. 4). Also, with the progression of levels, the answers will most likely be the option that the user has not seen before. The game will not chose any phonemes as correct that were part of the option set in previous levels.&lt;/p&gt;
&lt;p&gt;II) the phonemes are always chosen from a statically defined list&lt;/p&gt;
&lt;p&gt;Since the game always refers to a single static list of phoneme for selecting correct and incorrect options, it does not adapt to re-test previous misses of a user.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/--6Mit95kxAA/V_Ot573LoHI/AAAAAAAAFY4/3brgLpqUxqAXuvQzmRibKeHkR4aoe4bUwCLcB/s400/Picture5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;III) chances of missing some phonetics because of dynamic array creation&lt;/p&gt;
&lt;p&gt;The application generates a list during application runtime to check if all phonemes for a particular level have been tested. If a phoneme is tested twice in a level and the player chose the correct answer again, the stars are not increased because the generated list already has the phoneme. It was added to the list when the player answered correctly the first time around. This is a great implementation. However, there is also a small issue with this. Since the list is generated during runtime but the number of stars a player has in a particular level is stored and retrieved when the player re-logins, chances are, some phonemes are never tested.&lt;/p&gt;
&lt;p&gt;An example,
If Player A starts the game, and in Level 1 he/she successfully recognizes phonemes for {a, e, o, u}, the screen-shot would look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-_67WBXDDGLU/V_OuqlQsQ6I/AAAAAAAAFZA/lM1zxuLjOH8KToIth35dLJXmQZ0XyLtQACLcB/s400/Picture6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;When the player is playing the game, the game initializes an array and stores all the successful hits exactly once. The list has “a”, “e”, “o”, and “u” at this point. The player is promoted to another level when he/she has five stars.&lt;/p&gt;
&lt;p&gt;The stars are increased if a phoneme can be added to a list (the condition being it does not already exist in the list). In this case, the stars will only be increased if the phonetic for “i” is tested and the player successfully answers that.&lt;/p&gt;
&lt;p&gt;But, if the player decides to leave the game at this point to continue at another time, the array that stored all previous successful hits will be reset. Although he/she will still have 4 stars, now all it takes to move to another level is to identify the first phoneme put by the game. Because of this issue, the might progress to next level without having to identify phoneme for “i”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Adaptability&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This feature is currently missing because it depends on algorithm design. Once the issues are resolved in that part, the next step would be to work on adapting the levels to test users on previously missed phonetics.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Report Generation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Although the application successfully collects useful data, the data is currently not being utilized for analysis.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Identified solutions for aforementioned bugs:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The solutions have already been implemented in the application. Currently, only algorithm specific problems have been solved. The application still needs additional design and game elements to make it more interactive.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-HA7bVCjvbCs/V_O1Tkgyh_I/AAAAAAAAFZg/44LqPGP445EhEaZ29KfxdmTresDLnmWwACLcB/s640/Screen%2BShot%2B2016-10-04%2Bat%2B7.41.39%2BPM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Republic of Zorgania</title>
      <link>https://subedi.ml/posts/zorgania/</link>
      <pubDate>Fri, 18 Apr 2014 09:13:12 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/zorgania/</guid>
      <description>&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-UeCtdNRm02c/U1CxJR6GsdI/AAAAAAAACpA/3P9OqkZ9eIQ/s1600/Untitled-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Zorganian Republic has some very strange customs. Couples only wish to have female children as only females can inherit the family&amp;rsquo;s wealth, so if they have a male child they keep having more children until they have a girl. If they have a girl, they stop having children. What is the ratio of girls to boys in Zorgania?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The ratio of girls to boys in Zorgania is 1:1. This might be a little counter-intuitive at first. Here are some ways of tackling this problem.
&lt;strong&gt;1. Monte Carlo Simulation:&lt;/strong&gt;
Although, Monte Carlo simulation does not necessarily show why the result is 1:1, it is appropriate because of the very counter-intuitive nature of the problem. At the very least, it helps us see that the result is indeed 1:1. Therefore, this is a good start.&lt;/p&gt;
&lt;p&gt;The following R code estimates the probability of a child being a boy in Zorgania.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;couples &amp;lt;- 100000
boycount &amp;lt;- 0

for (i in 1:couples){
    # 0: boy
    while (sample(c(0,1),1) == 0) {
    boycount=boycount+1
  }
}
probability &amp;lt;- boycount/(couples+boycount)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-T_wWq6Bc8pA/U1C18KqTM-I/AAAAAAAACpI/XcFVRcq7n_Q/s1600/Untitled-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Understanding the question better:&lt;/strong&gt;
Here is another question: What is the probability of getting a tail in a fair coin toss, if all seven previous tosses resulted in heads? Since coin flips are independent events, the probability is still going to be 0.5. Similarly in this case, the child births are independent. It does not matter if the couples stop giving birth after they have a baby-girl. The expected value is unchanged.&lt;/p&gt;
&lt;p&gt;For example, consider five couples: C1, C2, C3, C4 and C5.
If B-&amp;gt; Boy and G-&amp;gt; Girl. Using R&amp;rsquo;s sample().
For C1:  {B, G}
For C2: {G}
For C3: {B, B, G}
For C4: {B, G}
For C5: {G}&lt;/p&gt;
&lt;p&gt;Now, ignore the couples and only consider the children. The children are {B, G, G, B, B, G, B, G, G}. The only thing happening here is simply the generation of  either a B or a G with equal probability for each generation. At this point, it is quite obvious that the part that has to do with &amp;ldquo;couple&amp;hellip;.&amp;rdquo; in the question is to mislead and confuse similar to the &amp;ldquo;previous seven tosses..&amp;rdquo; example that I mentioned in the beginning of 2.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.  Counting:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-7FiIun81q9I/U1Daw9uveiI/AAAAAAAACpY/ppyL8FvonUg/s1600/Untitled-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;If we start with 512 couples (hence 512 first borns), half of them are going to have a girl as their first. Those couples will stop having children. Among, the other half couples who had a son as their first child, half of them are going to have a girl as their second child and so on. At every step there is an equal numbers of boys and girls. Therefore, the expected ratio is 1:1.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fractal Plots</title>
      <link>https://subedi.ml/posts/fractal_plots/</link>
      <pubDate>Tue, 15 Apr 2014 17:12:41 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/fractal_plots/</guid>
      <description>&lt;h3 id=&#34;the-du-compiler&#34;&gt;The Du Compiler:&lt;/h3&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-Mby3dBcaRKo/U0zGR29ZF9I/AAAAAAAACm4/qjEeUPPlBsU/s1600/Rplot03.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is the naive/brute-force implementation of the Mandelbrot Set plotting. I just followed the algorithm.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Plotting the Mandelbrot Set 

# length of sequence for real and imaginary parts of complex numbers
length &amp;lt;- 1000

# sequences for real and imaginary parts
real = seq(-1.8,0.6, len=length)
imaginary = seq(-1.2,1.2, len=length)


result &amp;lt;- matrix(nrow = length, ncol = length)

for (i in 1:length)
{
  for (j in 1:length)
  {
    result[i,j]=inmandelbrotset(complex(real = real[i], imaginary = imaginary[j]))       
  }
}

image(result, axes=FALSE)



# function that checks if a point E mandelbrot set
inmandelbrotset &amp;lt;- function(c)
{
  dwell.limit &amp;lt;- 2048
  z &amp;lt;- 0  
  for (i in 1:dwell.limit)
  { 
    z &amp;lt;- z ** 2 + c
    if (Mod(z) &amp;gt; 2)
    {
      return(FALSE)
    }
  }  
  return(TRUE)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-Iqm_BdgidJU/U0qOV5YyfsI/AAAAAAAACmM/FXeCXs-kNkM/s1600/output_fSU8xz.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adding colors:&lt;/strong&gt;
We now have a Boolean matrix that records if a point is in the Mandelbrot Set. Since the matrix can only have two values : true or false, thus far, we have only been able to plot read and white images. The next step is to add colors such that we get more information on when a particular point escapes the radius of 2. Again, this is the naive/brute force way of doing it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Mandelbrot Plotting with colors 
length &amp;lt;- 1000
real = seq(-2.0,2.0, len=length)
imaginary = seq(-2.0,2.0, len=length)
result &amp;lt;- matrix(nrow = length, ncol = length)
dwell.limit &amp;lt;- 512

for (i in 1:length)
{
  for (j in 1:length)
  {  
    z &amp;lt;- 0
    c &amp;lt;-complex(real = real[i], imaginary = imaginary[j])
    for (k in 1:dwell.limit)
    { 
      
      z &amp;lt;- z ** 2 + c
      if (Mod(z) &amp;gt; 2)
      {      
        result[i,j]=k
        break
      }
    }     
    
  }
}
set.seed(2)
image(result,breaks=0:dwell.limit
      ,col=c(1,sample(terrain.colors
                      (dwell.limit-1,alpha = .8))),asp=1,ax=F)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-gxswS7fcV5k/U0zNhDoPqcI/AAAAAAAACnE/za9JUEmkQ3M/s1600/Rplot06.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-hNco2zVAeSs/U0z4XWixrUI/AAAAAAAACoU/dFvirhQFLvQ/s1600/Rplot14.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;and, just for the heck of it..&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-XkuSH0dAMF8/U0z6YBmVmKI/AAAAAAAACok/0DfUTNEMYpc/s1600/Untitled-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ASCII Mandelbrot Set using R (naive)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;s &amp;lt;- seq(-1.7,1.2, by =.1)
a &amp;lt;- &amp;quot;&amp;quot;
for (i in 1:length(s))
{  
  for (j in 1:length(s))
  {
   a&amp;lt;-cat(a,inmandelbrotset(complex(r = s[j], i = s[i])))     
  }  
  a &amp;lt;- cat(a,&amp;quot;\n&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-SqMXDu-orPE/U1YH-90-fQI/AAAAAAAACqs/lydpeihbFMk/s1600/Untitled-1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Achieved by returning a &amp;quot; &amp;quot; or &amp;ldquo;#&amp;rdquo; instead of FALSE or TRUE from function &amp;ldquo;inmandelbrotset&amp;rdquo;.
&lt;strong&gt;A better algorithm&lt;/strong&gt;
Utilizing R&amp;rsquo;s easy to use lists in implementation:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-13I74YsZA3Q/U00ph_v2sqI/AAAAAAAACos/0BwTZdK1xtg/s1600/Untitled1.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# more efficient algorithm to plot the Mandelbrot set 

sequence &amp;lt;- seq(-2,2,len=1000)
dwell.limit &amp;lt;- 200

# matrix of points to be iterated 
complex.matrix &amp;lt;- t((sapply(sequence,function(x)x+1i*sequence)))
in.mandelbrot.index &amp;lt;- 1:length(complex.matrix)
iter=z=array(0,dim(complex.matrix)) 
           
for(i in 1:dwell.limit){ 
  # complex quadratic polynomial function for all points
  z[in.mandelbrot.index]=complex.matrix[in.mandelbrot.index]+z[in.mandelbrot.index]^2 
  # boolean matrix
  result=Mod(z[in.mandelbrot.index])&amp;lt;=2  
  # if result is false, store the iteration 
  iter[in.mandelbrot.index[!result]]=i
  # save all the index where points are still in the mandelbrot
  in.mandelbrot.index=in.mandelbrot.index[result]
}
set.seed(19)
image(iter,main=paste(&amp;quot;Iterations: &amp;quot;, i, sep=&amp;quot; &amp;quot;), breaks=0:dwell.limit
      ,col=c(1,sample(rainbow
                      (dwell.limit-1,alpha = .8))),ax=F, asp=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Plotting the Julia set&lt;/strong&gt;
A little modification to the code above (red and white Mandelbrot) produces Julia Sets. The idea here is to set a constant C and send Z to the function instead of C.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;c &amp;lt;- complex(real=-0.1,imaginary=0.651) 
label &amp;lt;- toString(c)
injulia &amp;lt;- function(z)
{
  dwell.limit &amp;lt;- 128
  
  for (i in 1:dwell.limit)
  { 
    z &amp;lt;- z ** 2 + c
    if (Mod(z) &amp;gt; 2)
    {
      return(FALSE)
    }
  }  
  return(TRUE)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-q4rNT8vd-4o/U0tP_jGwdpI/AAAAAAAACmc/GjVN5c_lWNw/s1600/output_i4d2h6.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adding colors:&lt;/strong&gt;
This is achieved by following the same process as above.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-U9PdaivxB30/U0zZeEfcLOI/AAAAAAAACnQ/WbgnqUuE1Ww/s1600/Untitled-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-F3PRK6CQCPA/U0zZweXvhFI/AAAAAAAACnY/moDHQIhBi1E/s1600/Rplot10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-AxtVIdnIOOo/U0za42jqSHI/AAAAAAAACng/lanOjpzFeOE/s1600/Rplot13.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sierpinski Gasket using Chaos game&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#### Chaos game for generation of Sierpinski Gasket
# 1. Take 3 points in a plane to form a triangle, you need not draw it.
# 2. Randomly select any point inside the triangle and consider that your current position.
# 3. Randomly select any one of the 3 vertex points.
# 4. Move half the distance from your current position to the selected vertex.
# 5. Plot the current position.
# 6. Repeat from step 3

plot.new()
iterations &amp;lt;- 2000
vertices &amp;lt;- matrix(c(0,0,0.5,1,1,0),3,2, byrow=T)
current.point &amp;lt;- c(0.5,0.5)
random.vertex &amp;lt;- sample(1:3,iterations,replace=T)
plot.result = matrix(nrow=iterations,ncol=2)
for (i in 1:iterations){
 current.point &amp;lt;- (current.point+vertices[random.vertex[i],])/2
 plot.result[i,] &amp;lt;- current.point
}
points(plot.result,pch = 46)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-gzjEuswLUvg/U1IpGu-W6wI/AAAAAAAACpo/EUR7t3Pyrgo/s1600/output_CRtwqO.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Adding colors:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;points(plot.result,pch = 46,col=c(13,3,41)[random.vertex])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-Kog9tekKz5A/U1IqRVeK99I/AAAAAAAACp0/0uOMoFOJxds/s1600/Rplot26.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-5dN5kmWtLD0/U1J4WJPWDiI/AAAAAAAACqc/PoeEYiO4esg/s1600/Untitled-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Lost Brothers</title>
      <link>https://subedi.ml/posts/thelostbrothers/</link>
      <pubDate>Mon, 31 Mar 2014 12:11:45 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/thelostbrothers/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-jB1157xl870/UznA7_yh_qI/AAAAAAAACfc/rioorJr5fhQ/s1600/Bdc6oaRT9.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;For quite some time now, my father and my uncle have been debating over the coordinates of their houses with respect to each others. Albeit barely 750 meters from each other, there is not much visible reference points or landmarks to figure it out accurately. The blame is on the molasses thick concrete jungle of Kathmandu valley. (Side-note: Kathmandu will soon be synonymous to the word asphyxiation). Although, I sincerely appreciate their curiosity, I think it is time to end this for once and for all.&lt;/p&gt;
&lt;p&gt;I have used photos of my sister (Ashma) and my cousin (Samip) as labels to the directions.&lt;/p&gt;
&lt;p&gt;The app implements Canvas to &amp;ldquo;draw&amp;rdquo; the direction. The two GPS coordinates (obtained from Google Earth) were hard-coded into the program and Azimuth from orientation sensor was used to calculate the direction. Basically, it is a compass that points the direction from one house to the other instead of pointing North.
Apart from this rather trivial implementation, the code can be modified to achieve some fun/interesting/useful developments. For instance, the direction of Mecca for Muslim prayers is one that comes to mind. Or, it could be modified into a bearing pointer app by using GPS data and some input EditTexts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Snippet&lt;/strong&gt;
onCreate&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; protected void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  mCustomDrawableView = new CustomDrawableView(this);
  setContentView(mCustomDrawableView); // Register the sensor listeners
  Resources res = getResources();
  samip = BitmapFactory.decodeResource(res, R.drawable.samip);
  ashma = BitmapFactory.decodeResource(res, R.drawable.ashma);
  // Fill in correct latitude and longitude
  currentLoc.setLatitude(0.000000);
  currentLoc.setLongitude(0.00000);
  currentLoc.setAltitude(00);
  destinationLoc.setLatitude(0.00000);
  destinationLoc.setLongitude(0.0000);
  mSensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
  accelerometer = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  magnetometer = mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Canvas&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Float azimuth;
 public Bitmap samip;
 public Bitmap ashma;

 public class CustomDrawableView extends View {
  Paint compassAxis = new Paint();
  Paint compassCircle = new Paint();
  Paint compasAarrow = new Paint();

  public CustomDrawableView(Context context) {
   super(context);
   compassAxis.setColor(0xff00ff00);
   compassAxis.setStyle(Style.STROKE);
   compassAxis.setStrokeWidth(2);
   compassAxis.setAntiAlias(true);
   compassCircle.setColor(0xff000000);
   compassCircle.setStyle(Style.STROKE);
   compassCircle.setStrokeWidth(10);
   compassCircle.setAntiAlias(true);
   compasAarrow.setColor(0xff0000ff);
   compasAarrow.setStyle(Style.STROKE);
   compasAarrow.setStrokeWidth(3);
   compasAarrow.setAntiAlias(true);

  };

  protected void onDraw(Canvas canvas) {
   int width = getWidth(), height = getHeight();
   int centerx = width / 2, centery = height / 2;
   /*
    * Drawing the axis and circle Being symmetrical, these don&#39;t need
    * to be rotated
    */
   // Axis
   canvas.drawLine(centerx, 0, centerx, height, compassAxis);
   canvas.drawLine(0, centery, width, centery, compassAxis);
   // Circle
   canvas.drawCircle(centerx, centery, 200, compassCircle);

   /*
    * since this was a pretty small scope app, magnetic north was not
    * changed to real north. See: &amp;quot;GeomagneticField&amp;quot;
    */
   // Used Float instead of float for this check
   if (azimuth != null) {
    // Converting radians to degrees
    float temp = (float) Math.toDegrees(azimuth);
    float bearing = currentLoc.bearingTo(destinationLoc);
    float direction = temp - bearing;
    canvas.rotate(-direction, centerx, centery);
   }
   canvas.drawLine(centerx, centery - 200, centerx, centery, compasAarrow);
   canvas.drawBitmap(samip, centerx + 5, centery - 200, compassAxis);
   canvas.drawBitmap(ashma, centerx + 5, centery - 15, compassAxis);

  }
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Screenshots:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-KH6uVX49fFA/Uzu2oY0VCTI/AAAAAAAACgE/5_rfL55f0J4/s1600/ashmatosamip.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-ybjvNLwJseo/Uzu2o-iKgDI/AAAAAAAACgI/ROqtPEWuXA4/s1600/ashmatosamipmenu.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-Ri5qmjH9TWo/Uzu2pi_1kRI/AAAAAAAACgU/USFWoFfQSe4/s1600/samiptoashma.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;And after some time wasting:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-aRNMlhRQy-o/UzwIWzVYEbI/AAAAAAAACgk/8Wh_SAAL3DA/s1600/device-2014-04-02-183459.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android&#43;Arduino RC Car</title>
      <link>https://subedi.ml/posts/rc_car/</link>
      <pubDate>Fri, 31 Jan 2014 11:03:13 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/rc_car/</guid>
      <description>&lt;h3 id=&#34;androidarduino-rc-car&#34;&gt;Android+Arduino RC Car&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-_8RnAwamLOM/UuxigwOv4HI/AAAAAAAACW4/mW5MxPQ7HdY/s1600/DSC_0027.JPG&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://www.ayushsubedi.com/2013/07/androidrccar.html&#34;&gt;previous attempt&lt;/a&gt; was in shambles due to the lack of proper products. This time, I got myself a Sainsmart L293D motor driver (actually a cloned version of the ever so popular Adafruit L293D driver) and a handy four wheel drive chassis. Hereupon, the only adjustment  required was the use of analog pins as digital pins. This is the consequence of the motor driver using up all the digital pins and leaving no pins for the Bluetooth shield. I also hooked up the Arduino to a USB power bank.&lt;/p&gt;
&lt;p&gt;Tools used:
~ Arduino Uno
~ 4WD Chassis
~ SainSmart motor driver (L293D)
~ Sunkee 30ft Bluetooth Module
~ Anker 15000 mAh power bank&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-a_8ouJ9TTOU/UuxyfHkp7DI/AAAAAAAACXI/8h4QGB3fCQo/s1600/Untitled-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Arduino&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//Project: Android RC Car
//Author: Ayush Subedi

#include &amp;lt;AFMotor.h&amp;gt; //import Adafruit Motor library
#include &amp;lt;SoftwareSerial.h&amp;gt;// import the serial library
SoftwareSerial newPorts(15, 17); // RX =15= A1, TX=17=A3  
AF_DCMotor motor1(1, MOTOR12_1KHZ); // create motor #1, 1KHz pwm
AF_DCMotor motor2(2, MOTOR12_1KHZ); // create motor #2, 1KHz pwm
AF_DCMotor motor3(3, MOTOR34_1KHZ); // create motor #3, 1KHz pwm
AF_DCMotor motor4(4, MOTOR34_1KHZ); // create motor #4, 1KHz pwm

void setup() {
  newPorts.begin(9600);           
  motor1.setSpeed(255);     // set the speed to 200/255
  motor2.setSpeed(255);     // set the speed to 200/255
  motor3.setSpeed(255);     // set the speed to 200/255
  motor4.setSpeed(255);     // set the speed to 200/255
}

void loop() {  
    while (newPorts.available() &amp;gt; 0)
  {
    char ch = newPorts.read();
    newPorts.println(newPorts.read());  
    executeReceivedCommand(ch);
  } 
}

void executeReceivedCommand(char command)
{
  switch (command)
  {
    //Forward
  case &#39;0&#39;:
    motor1.run(FORWARD);     
    motor2.run(FORWARD);
    motor3.run(FORWARD);
    motor4.run(FORWARD);  
  break;
    
    //Reverse
  case &#39;1&#39;:
    motor1.run(BACKWARD);     
    motor2.run(BACKWARD);
    motor3.run(BACKWARD);
    motor4.run(BACKWARD);
   
  break;     

    //Left : skid steering
    case &#39;3&#39;:
    motor1.run(FORWARD);
    motor4.run(FORWARD);
    motor2.run(RELEASE);
    motor3.run(RELEASE);
  break;
  
    //Right : skid steering
    case &#39;4&#39;:
    motor2.run(FORWARD);
    motor3.run(FORWARD);
    motor1.run(RELEASE);
    motor4.run(RELEASE);
  break;

     //Stall
  case &#39;2&#39;:
    motor1.run(RELEASE);      
    motor2.run(RELEASE);
    motor3.run(RELEASE);
    motor4.run(RELEASE);    
  break;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-cuy1cpGVbTE/Uux-d0HoVHI/AAAAAAAACXY/RiNMCCUG3Ss/s1600/device-2014-02-01-103955.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-BYq7Y80m_CQ/Uux-fb2qPsI/AAAAAAAACXw/CP5jKd5ZeMM/s1600/device-2014-02-01-104054.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-5GwL64mI0GM/Uux-ey1e-eI/AAAAAAAACXk/FtT7x2U8ozU/s1600/device-2014-02-01-104037.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;In a nutshell, the Android device sends &lt;em&gt;Char&lt;/em&gt; type to Arduino which is used to rotate the motors to maneuver towards a desired direction.&lt;/p&gt;
&lt;p&gt;Forward: 0
Reverse: 1
Stop: 2
Left: 3
Right: 4&lt;/p&gt;
&lt;p&gt;The car turns left and right by implementing &lt;em&gt;skid steering&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pictures and Video:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-s2w3-5LZqMo/Uuyr1gptrFI/AAAAAAAACYI/HpUrDAo6bro/s1600/DSC_0033.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-v1Yr71b9nEg/Uuyr5-n2T3I/AAAAAAAACYQ/uPvTKj_qzow/s1600/DSC_0035.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-SbQNev4Xlac/UuytAzkVbWI/AAAAAAAACYc/nDIj4OcxYCc/s1600/DSC_0036.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/KiaEGsHsIco&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Snakes and Ladders</title>
      <link>https://subedi.ml/posts/snakesandladders/</link>
      <pubDate>Mon, 02 Dec 2013 10:09:32 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/snakesandladders/</guid>
      <description>&lt;h3 id=&#34;snakes-and-ladders&#34;&gt;Snakes and Ladders&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-tefYwsHiebo/UrrjwTMNHvI/AAAAAAAACTM/CqzL6R9QJTo/s320/Untitled-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;This game needs no introduction. Although there are several variations of this game (mainly on position of the snakes and ladders), the rules are generally the same. Some of the rules, (which are part of my algorithm) are mentioned below. Also, this game requires no skill as it solely depends on luck/probability. This allows several mathematical questions relating to this game be answered using Monte Carlo simulation. However, for this post, I will only be investigating from an analytic/subjective stand point. That is, I will be using Markov Chain to answer those questions.
&lt;strong&gt;Markov Chain&lt;/strong&gt;
&lt;a href=&#34;http://en.wikipedia.org/wiki/Markov_chain&#34;&gt;Wikipedia link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The game&amp;rsquo;s &lt;em&gt;Markov property&lt;/em&gt; or &lt;em&gt;memorylessness&lt;/em&gt; allows us to use Markov Chain. That is, the probability of occurrence of next event only depends on current event and not on any other events that occurred before. An example from our game: It does not matter if the player reached square 31 using the ladder from square 9, or by traversing the hard way around. Once the player is in 31, the probability of getting to square 32 does not depend on the &amp;ldquo;past&amp;rdquo;.
&lt;strong&gt;Transition matrix&lt;/strong&gt;
&lt;a href=&#34;http://en.wikipedia.org/wiki/Stochastic_matrix&#34;&gt;Wikipedia link&lt;/a&gt;
Transition matrix is a 2 dimensional array that encapsulates state transitional probabilities. For example, a transition matrix &lt;em&gt;P&lt;/em&gt;, given the following information (Mathematical model of one dimensional random walk),&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-EzQITg5YrJs/Uruin1dO4FI/AAAAAAAACTk/HtS3zjNiA28/s200/Untitled-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;would be,&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-hGD2n01zTNc/Urui8NwZN8I/AAAAAAAACTs/Li8N0-FFep4/s320/Untitled-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Transition matrix for Snakes and Ladders&lt;/strong&gt;
&lt;strong&gt;Trivial Transition Matrix&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First of all, consider a case where there are no snakes or ladders. Let us call this our Trivial (for the lack of words) scenario.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-S5UwD_wC1JE/Uru0Zpth-zI/AAAAAAAACT8/X4pTBXhceAc/s400/null.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;This definitely makes for a boring game. However, it helps with the math. First of all, the square 0 is the position the player is before the game starts.  Now, since we are using a cubic die, on the first roll, the probability of going from 0 to 1, 0 to 2, 0 to 3, 0 to 4, 0 to 5, and 0 to six is 1/6. Since we are not accounting for snakes or ladders, the probability of going from box i to boxes i+1, i+2, i+3, i+4, i+5, and i+6 are all going to be 1/6, unless we run out of space. That is, if we are at 97, the person can only move to next step if the die rolls 1, 2 or 3. For anything greater, the person will not go to the next step. Therefore, in this case, the probabilities are: 97 to 98 = 1/6, 97 to 99 = 1/6, 97 to 100 = 1/6 and 97 to 97 = 3/6.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Building the Trivial transition matrix based on the aforementioned rule.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; import Jama.Matrix;
        /**
  * @return 101X101 Transition Matrix for case: Trivial
  */
 public Matrix trivialMatrix() {
  int difference, playerPosition = 0, matrixSize=101;
  double transitionM[][] = new double\[matrixSize\][matrixSize];
  double probability = 1.0 / 6;

  for (playerPosition = 0; playerPosition &amp;lt; transitionM.length; playerPosition++) {
   for (int i = 1; i &amp;lt;= 6; i++) {
    if ((difference = matrixSize - playerPosition) &amp;lt;= 6) {
     for (int k = 1; k &amp;lt; difference; k++) {
      transitionM\[playerPosition\][playerPosition + k] = probability;
     }
     transitionM\[playerPosition\][playerPosition] = (6 - difference + 1) * probability;
    } else {
     transitionM\[playerPosition\][playerPosition + i] = probability;
    }
   }
  }
  return new Matrix(transitionM);
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Top-Left&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-D7P9nwwtH8o/UrvDvXHBE-I/AAAAAAAACUU/wc5T45yEeR4/s640/top.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bottom-Right&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-0AVTUWGwEao/UrvDue1c5XI/AAAAAAAACUM/xYxHR6t-a08/s640/bottom.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Non-Trivial Transition Matrix&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-CePQbx-Vnlo/UrxXO198xGI/AAAAAAAACWk/gbsFLketz9Y/s400/chutesladders.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Snakes:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;98 ~ 78, 95 ~ 75, 93 ~ 73, 87 ~ 24, 64 ~ 60, 62 ~ 19, 56 ~ 53, 49 ~ 11, 48 ~ 26, 16 ~ 6&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ladders:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1 ~ 38, 4 ~ 14, 9 ~ 31, 21 ~ 42, 28 ~ 84, 36 ~ 44, 51 ~ 67, 71 ~ 91, 80 ~ 100&lt;/p&gt;
&lt;p&gt;I decided to use a simple &lt;em&gt;List&lt;/em&gt; implementation for this. This might most likely be the Brute-Force implementation (I know several ways to make it better but none to make it worse). One way to make it more efficient would be to use 82 by 82 matrix instead of 101 by 101.&lt;/p&gt;
&lt;p&gt;The advantage of using this implementation over the 82 by 82 matrix (apart from easy implementation) is that this method can be used for any snakes and ladders board variation. It also allows us to check for some hypothetical cases or answer more important questions. Eg: What is the best way to position snakes and ladders for maximum thrill to a player?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Building the non-Trivial transition matrix&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; /**
  * @return 101X101 Transition Matrix for case: non-Trivial
  */
 public Matrix nonTrivialMatrix() {
  int playerPosition,matrixSize=101,difference;  
  List&amp;lt;Integer&amp;gt; from = Arrays.asList(1, 4, 9, 21, 28, 36, 51, 71, 80, 98, 95, 93, 87, 64, 62, 56, 49, 48, 16);
  List&amp;lt;Integer&amp;gt; to = Arrays.asList(38, 14, 31, 42, 84, 44, 67, 91, 100, 78, 75, 73, 24, 60, 19, 53, 11, 26, 6);
  double probability = 1.0 / 6;
  double transitionM[][] = new double\[matrixSize\][matrixSize];

  for (playerPosition = 0; playerPosition &amp;lt; transitionM.length; playerPosition++) {
   if (!from.contains(playerPosition)) {
    for (int i = 1; i &amp;lt;= 6; i++) {
     if ((difference = 6 - playerPosition) &amp;lt;= 6) {
      for (int k = 1; k &amp;lt; difference; k++) {
       if (from.contains(playerPosition + k)) {
        transitionM\[playerPosition\][to.get(from.indexOf(playerPosition + k))] = probability;
       } else {
        transitionM\[playerPosition\][playerPosition + k] = probability;
       }
      }
      if (from.contains(playerPosition)) {
       transitionM\[playerPosition\][to.get(from.indexOf(playerPosition))] = (6 - difference + 1) * probability;
      } else {
       transitionM\[playerPosition\][playerPosition] = (6 - difference + 1) * probability;
      }

     } else {
      if (from.contains(playerPosition + i)) {
       transitionM\[playerPosition\][to.get(from.indexOf(playerPosition + i))] = transitionM\[playerPosition\][to.get(from.indexOf(playerPosition + i))] + probability;
      } else {
       transitionM\[playerPosition\][playerPosition + i] = transitionM\[playerPosition\][playerPosition + i] + probability;
      }
     }
    }
   }
  }
  return new Matrix(transitionM);
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Top-Left&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-R9-biUUcmiw/UrvWUKP8x_I/AAAAAAAACU4/2sEIXy2oWH8/s1600/top.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bottom-Right&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-9S88JEZ_wYs/UrvWUFzELZI/AAAAAAAACU0/VV-9PT6f_9Q/s1600/bottom.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Probability Vector&lt;/strong&gt;
&lt;a href=&#34;http://en.wikipedia.org/wiki/Probability_vector&#34;&gt;Wikipedia link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Probability vectors&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/proxy/Hh3RpupM-kluBlTwZebvrdQRabRQm1MBBT8BxVN-0SREDnW-h4BUVUojSeKr75ReQjKuoaFYosiFamRmhKcO6I4=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;represents the probability of being on a certain square after n dice rolls. It is a vector with non-negative entries that add up to one.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/proxy/CTz-FJf12YwQ9Yza6ImhV1zcBzFlWuoLgEN7_kTPBj1jqI801oTFpXtz8QBfEasNx7oGg5-jCsIZZP04_bBjMuKClb8g9R3WwADyc8-jfMGRoHV7pzUNnuXqoBnyoJWmBKwu2OED2aYHkA6kixUpnHzhPwQ3cgBquv45tRFaP4g5nYdIQDz1jkTietoz5rKWnt2gB2ej7V0rBalxUXcd3wQ8xb3p_g5yxnQU=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;implies that the probability of being on square 0 is 1. This is our input.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/proxy/sQMpxr8aHFBdLfBjKG8VHPLKg3OujQct4vbkigk-5CYuq47XuvfnbcPitvyyvECmBDlOBh7oYAzqiaX2TqxlKZVAYoFv638FVBzv7VOBAI6JMYi-FiDLrWsPf5LpfjenkwF-=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh4.googleusercontent.com/proxy/OhLb7b5YJ5ANaHWCFlQSeN0-4GmP3AyO8In7yXt429XH_2cHs3Tt9UO9Pw4Jrq73grU-oli7IqPTy6tW0ytx0swIxRyDjLR9oPv0NBeWUA97Amq5ySpbL9sNLK6WeGuStyfi=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;If &lt;em&gt;P&lt;/em&gt; is the Trivial transition matrix,&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/proxy/4mEywZbxQeUlfNhJpOqy5YgOw8zZKrKdUi9qDR4MnG0aqcyUdBiV2Xp0rmiA6W7l2_e2YzgBlBIthsOgIBbGgcx-950O3BIxTCRcgscSXTSr91--xb1kOrK5WE7XpqlLRlXe9IKCKzCFcjroJxy7mFKXV-Sl51rm9vzijx3htBU86q9h0cE9-gD2-z3COWP7HRCJxz86pBFwOJraltHK1xgMU_ra0v1p9bWG-8jFGvm727rn68rnFDP_IsN94A3SKaUaK5pGtyjjpXJEzABzQogWbRhUsM3daBF9LtIE5zQg9UvagLjX5e9FynO5VUA-rhcRA6oGRJvx1T6UyvPYaznYqxCaa48nTZnQEI-jTF_KOIDdlLVHUn032GXz2mOZS_T6f8dbl6QHUlxrWCYU77cGuiOVyuLGcN5ddg8KlSXkmQBiQg=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;If &lt;em&gt;P&lt;/em&gt; is the non-Trivial transition matrix.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh4.googleusercontent.com/proxy/K5vuIHoJbyyyBUyaV3zHcNnuXG40AF9v-b744Ti2N-reLSDS0HLLl3FPyXe3AMA73J68US1C7n01nvFZZUygR6TF8olnaSYyeozOGxct_41Nw__mcxbIy8u5EGSHqIhbrIQaIiYkM_NmuPZc3726kpY4ET16ghuT3iBFvhI_wnzFxNiYiZ8KOqocXBsDh83WLl0t7Vit5AWWKJYIw06tRAF095AHnlwzr_cQetRvJT97IGU-_ZS3IbuHoXzBCfvaONpojNCm6vup8v4rTGz_dGK1hP96D4q3jcNfRT7yOJL9MiApAmeJ5yaVjPXz7S1fd3J-bUEUPa-5Zg3rCtOTE8RJPeYLH2c234olprBbEuePH_mDZiQktWyixOLnoXhHE5r_hPNeIA0O-U1B3VH3I_Eqa-tORAE5DizAO5GnYMYDidg=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Building the Probability Vector&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; /**
  * @return Probability Vector with 1 being the first element
  */
 public Matrix probabilityVector() {
  double probabilityV[] = new double[101];
  probabilityV[0] = 1;
  return new Matrix(probabilityV, 1);
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Question 1:&lt;/strong&gt;
&lt;strong&gt;Probability of being on square&lt;/strong&gt; &lt;em&gt;&lt;strong&gt;s&lt;/strong&gt;&lt;/em&gt; &lt;strong&gt;after&lt;/strong&gt; &lt;em&gt;&lt;strong&gt;n&lt;/strong&gt;&lt;/em&gt; &lt;strong&gt;dice rolls:&lt;/strong&gt;
Using &lt;em&gt;Vn-1 * P = Vn&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; /**
  * @param transitionMatrix
  * @param probabilityVector
  * @param diceRolls
  */
 public static void squareProbability(Matrix transitionMatrix, Matrix probabilityVector, int diceRolls) {
  NumberFormat nf = NumberFormat.getInstance();
  nf.setMinimumFractionDigits(20);
  System.out.println(&amp;quot;Dice rolls: &amp;quot;+diceRolls);
  for (int i = 1; i &amp;lt;= diceRolls; i++) {
   probabilityVector = probabilityVector.times(transitionMatrix);  
  } 
  probabilityVector.print(nf, 3);
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Some outputs for the Trivial matrix:&lt;/strong&gt;
I used html tables to simulate the board (basically printed the html tags within java code).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-bf4gfazPSTc/UrwPSUJvCoI/AAAAAAAACWM/abBVtWiWIc8/s1600/tr1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-r_ZPoixoCAI/UrwPSY02p7I/AAAAAAAACWI/1KSdh5wPRBw/s1600/tr2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Some outputs for the non-Trivial matrix:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-7PbGjTJB88s/UrwMVSZjdFI/AAAAAAAACVo/2_Qtz0iE1H4/s1600/diceroll7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-FRoHkWaBFzo/UrwMT-6BQ1I/AAAAAAAACVc/YoU-insHUCA/s1600/diceroll30.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-Uk5AevQ4NVs/UrwMVCMIlbI/AAAAAAAACVs/cjwBJ7t2FFI/s1600/diceroll60.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-71cSgHwz5D0/UrwMThK9VhI/AAAAAAAACVY/37G5e4G-VFU/s1600/diceroll100.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-AyEuODg3l6g/UrwMTvZ86HI/AAAAAAAACVg/UbRnTDGnqCI/s1600/dice1000.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Question 2:&lt;/strong&gt;
&lt;strong&gt;Minimum length of  a game and occurrence probability&lt;/strong&gt;
That is, after how many n, is the probability at square 100 greater than 0 for the first time?&lt;/p&gt;
&lt;p&gt;For the trivial case, the answer is, ceiling of 100/6 = 17.&lt;/p&gt;
&lt;p&gt;For the non-trivial case,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; /**
  * @param transitionMatrix
  * @param probabilityVector
  */
 public static void gameCompletion(Matrix transitionMatrix, Matrix probabilityVector) {
  NumberFormat nf = NumberFormat.getInstance();
  nf.setMinimumFractionDigits(30);
  int box = 100;
  int diceRolls = 0;
  while (probabilityVector.get(0, box) == 0) {
   diceRolls++;
   probabilityVector = probabilityVector.times(transitionMatrix);   
  }
  System.out.println(&amp;quot;The game can be completed in min of &amp;quot; + diceRolls + &amp;quot; dice rolls.&amp;quot;);
  System.out.println(&amp;quot;Probability of it happening: &amp;quot; + nf.format(probabilityVector.get(0, box)));
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Results:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Non-Trivial Matrix&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The game can be completed in min of 7 dice rolls.
Probability of it happening: 0.001564643347050754000000000000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rolls of {4,6,6,2,6,4,6} is one shortest solution.
However, in theory, the game could last forever. Therefore, there is no longest game.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Trivial Matrix&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The game can be completed in min of 17 dice rolls.
Probability of it happening: 0.000000000009038995585604526000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rolls of {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6} is the only shortest solution.
Longest game in this case is 100 dice rolls. The player will have to roll 1, 100 consecutive times from start.
&lt;strong&gt;Question 3:&lt;/strong&gt;
&lt;strong&gt;Expected length of a game:&lt;/strong&gt;
Let &lt;em&gt;subStochasticMatrix&lt;/em&gt; be the &lt;em&gt;100 by 100&lt;/em&gt; matrix obtained by deleting the last row and column of the transition matrix. Also, let &lt;em&gt;I&lt;/em&gt; be &lt;em&gt;100 by 100&lt;/em&gt; identity matrix. Let &lt;em&gt;inverse&lt;/em&gt; be the inverse of the difference of &lt;em&gt;I&lt;/em&gt; and &lt;em&gt;subStochasticMatrix.&lt;/em&gt; The expected number of rolls is given by the sum of entries in top row of the matrix &lt;em&gt;inverse&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; /**
  * @param transitionMatrix
  * @param probabilityVector
  */
 public static void expectedLength(Matrix transitionMatrix, Matrix probabilityVector){
  Matrix subStochasticMatrix=transitionMatrix.getMatrix(0, 99, 0 ,99);
  Matrix I = Matrix.identity(100,100);  
  Matrix inverse = (I.minus(subStochasticMatrix)).inverse();
  double sum=0;
  for (int i =0;i&amp;lt;=99;i++){
   sum=sum+inverse.get(0, i);
  }
  System.out.println(&amp;quot;Expected game length: &amp;quot;+sum);
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Results:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Non-Trivial Matrix&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Expected game length: 39.59836564020812
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Trivial Matrix&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Expected game length: 33.33333333333334
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Compiler from Scratch</title>
      <link>https://subedi.ml/posts/ducompiler/</link>
      <pubDate>Thu, 05 Sep 2013 17:12:41 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/ducompiler/</guid>
      <description>&lt;h3 id=&#34;the-du-compiler&#34;&gt;The Du Compiler:&lt;/h3&gt;
&lt;p&gt;For our Computer Science capstone project, we take on the beast - building a compiler from scratch. We had about three months to do it but we really had no clue of what we were doing for the first month and a half. Although we knew plenty of what there was to know about compilers in theory, we soon realized that building one from scratch was not going to be easy. We started with baby steps, and by the time the project was due, we were taking giant leaps (we had no other option). In the end, it turned out to be a reasonably fine compiler and an excellent experience. During these three months, I had the best and the worst experiences of my academic life. Therefore, this project is really special.&lt;/p&gt;
&lt;p&gt;Since this project belongs to two other people also, I won&amp;rsquo;t be posting any source code. This post will just have some example code for Du-Compiler.&lt;/p&gt;
&lt;p&gt;Finally, for anyone looking for a reasonably challenging senior projects, I would strongly encourage building a compiler. I say this for couple of reasons. First of all, it changes the way we look at code. It gives a better understanding of what exactly happens when the compile button is hit. In another words, it makes you aware of what is going on internally. Secondly, it involves learning/relearning several Computer Science topics such as regular expressions, hash table, data-structures, tree traversals, assembly level programming etc. It also involves A LOT of coding. When it all pans out, you are going to love what you have in your skill set.&lt;/p&gt;
&lt;h4 id=&#34;examples&#34;&gt;Examples&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;//Hello World
duhawk helloworld{
  duPrint(%Hello World%);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;//Simple Addition
duhawk simpleAdd{ 
  int a;
  a=5;
  int b;    
  b = a + 5;
  duPrint b;  
}
//Result: 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;//Simple Pattern
duhawk test{ 
  int i;
  i=1;
  int j;
  j=1;
  while (i&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;=10){
   j=1;
   while (j&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;=i){
    duPrint(%*%);
    j=j + 1;
   }
   duPrintln(%%);
   i= i + 1;
  }
} 

/*
Result
*
**
***
****
*****
******
*******
********
*********
**********
*/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;duhawk test{ 
int c;  
int d;     
duPrint (%Multiplication table of: %);  
duInput a;
duPrint (%upto: %);
duInput b;     

 for (c=1;c&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;=b;c=c + 1){
         duPrint a;
         duPrint (% X %);
         duPrint c;
         duPrint (% = %);
         d = a*c;
         duPrintln d;    
        }
} 

/*
Input for a = 19
Input for b = 15
Result:
Multiplication table of: 19
upto: 15
19 X 1 = 19
19 X 2 = 38
19 X 3 = 57
19 X 4 = 76
19 X 5 = 95
19 X 6 = 114
19 X 7 = 133
19 X 8 = 152
19 X 9 = 171
19 X 10 = 190
19 X 11 = 209
19 X 12 = 228
19 X 13 = 247
19 X 14 = 266
19 X 15 = 285
*/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Area of the Mandelbrot Set</title>
      <link>https://subedi.ml/posts/mandelbrot_area/</link>
      <pubDate>Wed, 02 Jan 2013 10:01:09 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/mandelbrot_area/</guid>
      <description>&lt;h3 id=&#34;area-of-the-mandelbrot-set&#34;&gt;Area of the Mandelbrot Set:&lt;/h3&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-ofFkTWEt7kw/U0evleXzgRI/AAAAAAAACl8/zg4_1dxmg7w/s1600/800px-Mandel_zoom_08_satellite_antenna.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The area of the Mandelbrot Set&lt;/strong&gt;
The Mandelbrot set is a fractal (illustrates self-similarity). The set is obtained from the quadratic recurrence equation,&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/proxy/V7ITPlrYZthFKEr263nwxpjVUiiLdwJ3L5z8rZPxVshqkDW1xj_BcYKUrf246BkzlwaXV5QoVZzFNUkmiXB6TuUKl8Y9l3nhVgA3dZr6_ovtk4rGCrb-AixpAtdrqCgkISYZDg56ngNsLPxZ6ys2h5hnDZXIlGU=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh4.googleusercontent.com/proxy/X-AGG1lSNsjhTrneJ3h2fypSNEr7abgYdF71JPMEwx24toeCKmXIa9c_9XKl09oRwaE1i_4Cx4AJ0tt9pg6Jn20iP6lveWG7K60LQjInQKJPAA=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;, where points&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh4.googleusercontent.com/proxy/Sz22hiBRGEIHg61Cft2B1Ngq6LjmT0TqvwbBIaH565JVFBbPbc1_AUAAQgs81OxuVd1KqFrCYZJo=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;in the complex plane for which the orbit of&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/proxy/LR4RXn0pCOL_pp956EEQ7ZXawp2p-vTPX_UjFP7oPeqA2kDvd1OoEsoB41Rb6piOeYSi1-EZ2lzInyCkRlQ4vzL5F6KGOReYfco-WxhwX2I=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;does not tend to infinity are in the set. The Mandelbrot set is a compact set, contained in the closed disk of radius 2 around the origin. Since it is contained in a disk of known area, it is possible to approximate the area of the Mandelbrot Set&amp;rsquo;s using Monte Carlo method.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-FCl6L4iNcbQ/Uo4VZENpRWI/AAAAAAAACFM/MpzH9iF2b3c/s400/use.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Java:&lt;/strong&gt;
Since Java does not inherently understand complex numbers, a &amp;ldquo;real&amp;rdquo; approach will be applied to perform the quadratic recurrence equation,&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/proxy/V7ITPlrYZthFKEr263nwxpjVUiiLdwJ3L5z8rZPxVshqkDW1xj_BcYKUrf246BkzlwaXV5QoVZzFNUkmiXB6TuUKl8Y9l3nhVgA3dZr6_ovtk4rGCrb-AixpAtdrqCgkISYZDg56ngNsLPxZ6ys2h5hnDZXIlGU=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;First, as shown in the figure above, inscribe the disk in a square of length 4 units. Let&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh4.googleusercontent.com/proxy/0yH1bkH6k3-YTHGlilL24aCKOeBoQY6IIs1otCW1XJZziPl873Drng-ae1OaB05EyYRvTp-xGlDOeyfE_vBhS5E=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;represent the coordinate along x-axis (real) and&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/proxy/dxhyDjv6XZgw-_WuwpK9p8L2LK7A-RFhcxXe-fn9uyjp7RObuV1kvVmcmuYlTr8oO_Te_rWY4ylDCAMtvdVgp6E=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;represent the coordinate along y axis. Now set&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/proxy/eP_4t-eW257n3jmR8D1kh4EEJ1tCPsiySrBJrsqqHw-ZBk4lL07CD6G3itIldJdehKKEzjywvisTTqD9LxeN2MRQnQ=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh4.googleusercontent.com/proxy/ZFARvm9iFhC_1Be81TOSDOf2Jho1NnN0L0WYIv-MO_249eSxbbNunvaDe4Svun8g20b8AGQEYpuTl38Q6ilzYM9A2Q=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;, where&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/proxy/hdeTD5wklsqEAljaDSnzAq7RFC4y_QjSvbKC_TSNLFZSYcOpoD5AANfGLwB95TiqmUV4OSujWjm8=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/proxy/k4rrnp9_gt6i9Zyf7jMI0qiROpdnvBXWqwQIWfzrgTRSkDHpLk198pua5NGt05fPHbyws5HqDftE=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;are randomly generated real numbers from [-2, 2]. Basically, the&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/proxy/hdeTD5wklsqEAljaDSnzAq7RFC4y_QjSvbKC_TSNLFZSYcOpoD5AANfGLwB95TiqmUV4OSujWjm8=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/proxy/k4rrnp9_gt6i9Zyf7jMI0qiROpdnvBXWqwQIWfzrgTRSkDHpLk198pua5NGt05fPHbyws5HqDftE=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;coordinates are being duplicated at this step to preserve the point&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh4.googleusercontent.com/proxy/Sz22hiBRGEIHg61Cft2B1Ngq6LjmT0TqvwbBIaH565JVFBbPbc1_AUAAQgs81OxuVd1KqFrCYZJo=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;. Next, iteratively compute the following from&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/proxy/rpzM0IBRXdvzJoamA8eeL5M5X8C1-x23i7_UE8_wT6sePiID0hgrA1EMyQjoWnids9gT_mqKcUn4evYYjnG4Tt6fcKgLu0YRpqQnXxT-nwpdyBbPTIcr3hutDaJfx6fR3meYBj5zEgZvpQw=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(for programming purposes, choose a large Dwell Limit). Simultaneously, check if&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/proxy/u2tI5wMdfS6PewRi_P8jgvOKOfocArri-stZmD4ByAlFuq3A5lydC11XQzizAhdLmahxzXnVM8SEk362OxJUJrU2NBbtFjAORPjnrzla2qjGK9TG5I1-XYbHwg5oeI2YHBjHzEfjVz3lI5mYmXq9=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;. If yes, increase count (not in the set) by 1 and get out of the loop (since all points should be contained in the disk).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/proxy/m8TcApmBEEAw108G1VlY7-EvQ4Be6UvoxXt2M400U8pseBlJtkposiJNr1X8Q2cBZjMu9H6EBYFOfvGzTb5ceTC9qQSxihh-xbGA81wKh-tGP3I7xWrJENQKCdjGHxorHdQ2SZJ0OzbHgR0kDkr-iK9KOwWE8mQ7Ww=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/proxy/umqP60O-kSi-Pn9U9wOWkcr8q6dUag1pk_PQ0VRtJI7Yp2cwzwK3s6JsC3WS2j7sk8m8hp04espvb2DAOPK0JF37-PEIQvdGq_Q6GKKNQm2EaAwlrt_eoRBuTS9vHfE=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Compute the ratio of number of points that are in the set to total number of points used. Then multiply the area of square (16 units square) to get the approximate are of the Mandelbrot set.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java Code:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import java.util.Date;
import java.util.Random;

public class MandelbrotArea {

    public static int mcRep = 5000;
    public static int dwellLimit = 2048;
    

    /**
     * @return random double in [-2,2]
     */
    public static double random() {
        return (new Random().nextDouble() * 4) - 2;
    }

    /**
     * @param r: real part of the complex number
     * @param s: imaginary part of the complex number
     * @return
     */
    public static boolean isMandelbrotSet(double r, double s) {
        
        double a = r, b = s, temp;
        
        // Iterative function
        for (int j = 1; j &amp;lt;= dwellLimit; j++) {
            temp = a;
            a = Math.pow(a, 2) - Math.pow(b, 2) + r;
            b = (2 * temp * b) + s;
            
            if (Math.pow(a, 2) + Math.pow(b, 2) &amp;gt; 4) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        long startTime = new Date().getTime();
        long count = 0;
        for (int i = 0; i &amp;lt;= mcRep; i++) {
            if (isMandelbrotSet(random(), random())) {
                count++;
            }
        }
        System.out.println(&amp;quot;Input -&amp;gt; DwellLimit: &amp;quot; + dwellLimit + &amp;quot;, McRep: &amp;quot; + mcRep);
        System.out.println(&amp;quot;Area: &amp;quot; + ((double) (count * 16)) / mcRep);
        System.out.println(&amp;quot;Execution time: &amp;quot; + (new Date().getTime() - startTime) + &amp;quot; ms&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input -&amp;gt; DwellLimit: 2048, McRep: 5000
Area: 1.5136
Execution time: 389 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;R&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;monte.Carlo &amp;lt;- 5000
x &amp;lt;- runif(monte.Carlo, -2, 2)
y &amp;lt;- runif(monte.Carlo, -2, 2)
list &amp;lt;- numeric(monte.Carlo)

for (j in 1:monte.Carlo){
  list[j] &amp;lt;- if (inmandelbrotset(complex(real = x[j], imaginary = y[j]))) 1 else 0
}
area&amp;lt;-mean(list)*16


# function that checks if a point E mandelbrot set
inmandelbrotset &amp;lt;- function(c)
{
  dwell.limit &amp;lt;- 2048
  z &amp;lt;- 0  
  for (i in 1:dwell.limit)
  { 
    z &amp;lt;- z ** 2 + c
    if (Mod(z) &amp;gt; 2)
    {
      return(FALSE)
    }
  }  
  return(TRUE)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>The Faro Shuffle</title>
      <link>https://subedi.ml/posts/faro_shuffle/</link>
      <pubDate>Wed, 05 Dec 2012 17:12:41 +0545</pubDate>
      
      <guid>https://subedi.ml/posts/faro_shuffle/</guid>
      <description>&lt;h3 id=&#34;the-faro-shuffle&#34;&gt;The Faro Shuffle:&lt;/h3&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/proxy/HmByI7lf5sUIht42g1AmRxOmq0INAaxCGyZ52ojil8Q7lOjqRT0T3fXCUZs_YfG-emi-W5zXYcIuUY7VYuOT_ChzIXTNFjBqc03axiORyFZNoUQ-RsH8eNWJpqbFHoW33lwq14cZoVAJ6g=s0-d&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;A Faro shuffle is probably one of the most intricate skills in an elite magician&amp;rsquo;s arsenal. Although it&amp;rsquo;s simple in concept, it is extremely difficult to perform and it typically needs years and years of practice. The idea of a shuffle is to randomize the cards, and since a typical shuffle is sloppy, that is usually true. However, a Faro shuffle is not random at all. In a perfect shuffle or a Faro shuffle the cards are divided exactly in half (top and bottom) and then interspersed alternately. Twenty one consecutive (out) Faro shuffles for a 50-card deck. However, it only takes eight consecutive Faro shuffles to bring a 52-card deck back to its original order. Interesting.
&lt;strong&gt;Java:&lt;/strong&gt;
If the number of cards in the deck is 12,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class outFaro {
 public static void main(String[] args) {

  // the number of card in the deck
  int numberofcardindeck = 12;
  // creating an array of cards
  int[] deck = new int[numberofcardindeck];

  // printing the order of cards in original deck
  System.out.println(&amp;quot;Original deck&amp;quot;);
  for (int i = 0; i &amp;lt; numberofcardindeck; i++) {
   deck[i] = i + 1;
   System.out.print(deck[i] + &amp;quot; &amp;quot;);
  }
  System.out.println();

  // dividing the cards in half
  int[] firsthalfdeck = new int[numberofcardindeck / 2];
  int[] secondhalfdeck = new int[numberofcardindeck / 2];

  // performing a (out) Faro shuffle
  for (int Faro = 1; Faro &amp;lt;= 50; Faro++) {

   for (int i = 0; i &amp;lt; numberofcardindeck / 2; i++) {
    firsthalfdeck[i] = deck[i];
    secondhalfdeck[i] = deck[i + (numberofcardindeck / 2)];
   }

   for (int i = 0; i &amp;lt; numberofcardindeck / 2; i++) {
    deck[2 * i] = firsthalfdeck[i];
    deck[2 * i + 1] = secondhalfdeck[i];
   }
   System.out.println();
   System.out.println(&amp;quot;Order under Faro Shuffle: &amp;quot; + Faro);
   for (int i = 0; i &amp;lt; numberofcardindeck; i++) {
    System.out.print(deck[i] + &amp;quot; &amp;quot;);
   }
   // done when the second card comes back to its original position
   if (deck[1] == 2) {
    break;
   }
  }
 }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Original deck
1 2 3 4 5 6 7 8 9 10 11 12 

Order under Faro Shuffle: 1
1 7 2 8 3 9 4 10 5 11 6 12 
Order under Faro Shuffle: 2
1 4 7 10 2 5 8 11 3 6 9 12 
Order under Faro Shuffle: 3
1 8 4 11 7 3 10 6 2 9 5 12 
Order under Faro Shuffle: 4
1 10 8 6 4 2 11 9 7 5 3 12 
Order under Faro Shuffle: 5
1 11 10 9 8 7 6 5 4 3 2 12 
Order under Faro Shuffle: 6
1 6 11 5 10 4 9 3 8 2 7 12 
Order under Faro Shuffle: 7
1 9 6 3 11 8 5 2 10 7 4 12 
Order under Faro Shuffle: 8
1 5 9 2 6 10 3 7 11 4 8 12 
Order under Faro Shuffle: 9
1 3 5 7 9 11 2 4 6 8 10 12 
Order under Faro Shuffle: 10
1 2 3 4 5 6 7 8 9 10 11 12 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After 10 out-Faro shuffles, the card returns to its original permutation. Therefore, 10 is the order of the permutation.&lt;/p&gt;
&lt;p&gt;The table below shows number of cards in a deck and the number of out-Faro shuffles required to bring it back to its original permutation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-KmHq4RSH4ms/Uq29yVj05wI/AAAAAAAACLM/2k8ZStuAFHE/s640/Untitled-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The definition of permutation and permutation group:&lt;/p&gt;
&lt;p&gt;“A permutation of a set A is a function from A to A that is both one-to-one and onto. A permutation group of a set A is a set of permutations of A that forms a group under function composition.”&lt;/p&gt;
&lt;p&gt;A Faro Shuffle is one-to-one and onto. At any frequency of the shuffle, every index (1-n) will have a unique card. Also, for every card, there is a unique index regardless of the frequency of the shuffle. The permutation for every “Number of cards” can be thought as a group under the operation - &lt;em&gt;FaroShuffle&lt;/em&gt;. Also, since “Number of Faro Shuffles” returns us back to the original permutation, we can establish it as the order of the permutation group.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-whe87B4VHc0/Uq3CE6GueDI/AAAAAAAACLY/g_dqBtk3rqM/s640/Una.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Theorem: &lt;em&gt;The order of a permutation of a finite set written in disjoint cycle form is the least common multiple of the lengths of the cycles.The order of a permutation of a finite set written in disjoint cycle form is the least common multiple of the lengths of the cycles.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is one of the most important Group Theory Theorems. Let us consider a 52-card deck to demonstrate this. From the Java code, the order is 8 when n is 52. Instead of looking at disjoint cycle form of the permutation to figure out the order of each element, we can also look at every permutation the original permutation has been to before returning to the original permutation. For n = 52, the table below shows all the permutations.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-B4_BNs2bQeA/Uq2Zi1lqTdI/AAAAAAAACKo/Cx615gOzaa8/s400/Untitled-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;From the table above, order of 1 and 52 = 1, order of 18 and 35 = 2 and order of rest of the elements = 8
The  L.C.M (1,2,8) = 8 is the order of the group according to the Theorem. This is also what we got from the Java code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conjectures / Proofs:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-DeHQjZrkGVo/Uq2c0tppv9I/AAAAAAAACK8/1gzd9lQiGzE/s640/Untitled-5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In-Faro and Out-Faro&lt;/strong&gt;
In an out-Faro shuffle, the top card from first half of the deck always remains on top. In an in-Faro shuffle, the top card from second half will be the new top card of the new shuffled deck.&lt;/p&gt;
&lt;p&gt;Since I did not have a deck of card with me, and I was bored, I wrote a very simple Android app to demonstrate in and out shuffle.&lt;/p&gt;
&lt;p&gt;Generating a random deck with 4 cards. Notice that the &lt;em&gt;Eight of Hearts&lt;/em&gt; is on top.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-fR-pQ6azcW4/Uq7GGeUNPqI/AAAAAAAACOo/C1BGTjCQ9-o/s400/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Out-Faro 1:  &lt;em&gt;Eight of Hearts&lt;/em&gt; is on top.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-f64pkNJmVR8/Uq7GWRD_b8I/AAAAAAAACOw/j8Qs84Y2P8w/s400/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Out-Faro 2:  &lt;em&gt;Eight of Hearts&lt;/em&gt; is still on top and the deck is back in its original permutation. Therefore, order = 2.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-fR-pQ6azcW4/Uq7GGeUNPqI/AAAAAAAACOo/C1BGTjCQ9-o/s400/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;In-Faro 1:  Using the same deck, &lt;em&gt;Eight of Hearts&lt;/em&gt; is no longer on top.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-RoXQAQWNgvw/Uq7HyrqFmRI/AAAAAAAACO8/uvGljin3cRk/s400/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;In-Faro 2:  Again&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-eZopVi0mdAI/Uq7IFsSKRMI/AAAAAAAACPE/WKf8Rn9D4zE/s400/4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;In-Faro 3:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-Vx4p3xhUfxg/Uq7IGBRuyUI/AAAAAAAACPM/evS-FcN4jcs/s400/5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;In-Faro 4: Back to its original order. Order = 4.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-w2GJfne76_s/Uq7IGXAUwSI/AAAAAAAACPQ/9zzmBMllX2Y/s400/6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;More screenshots:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-PhT--wNzS3E/Uq7JnQJtKGI/AAAAAAAACP0/AkEqRL5LHr8/s400/device-2013-12-16-151947.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-3CAkE5EPu-w/Uq7Jp7eIKxI/AAAAAAAACP8/ytswOcUmqbk/s400/device-2013-12-16-151958.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-ePVfCZMrQWk/Uq7JtzGGRwI/AAAAAAAACQM/jWqHUj49vJc/s400/device-2013-12-16-152030.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-WgONazrZPvU/Uq7Jy9f60CI/AAAAAAAACQc/kfB_kFQqtG8/s400/device-2013-12-16-152042.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/--SRvsM5UK7I/Uq7Jx-Xci4I/AAAAAAAACQU/qTUsHoc5Ty8/s400/device-2013-12-16-152050.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Another reason for writing the app was to see the connection between Binary Number System and Faro Shuffle. I read somewhere that magicians and gamblers use this for their advantage.&lt;/p&gt;
&lt;p&gt;Consider a random eight card deck.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-SMd8cvUS844/Uq7PPihPgbI/AAAAAAAACRM/Un7UIqS7LEk/s400/binary1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now, the trick is, to send the &lt;em&gt;Queen of Clubs&lt;/em&gt; to say for example, 7th position in the deck (6 cards on top of it), the gambler would perform two in-Faros and one out-Faro. 6 in binary is 110; so, for digit 1, the magician would perform an in-Faro and for 0, an out-Faro.&lt;/p&gt;
&lt;p&gt;1st in-Faro:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-DqmhoUID2Io/Uq7P1qVtGXI/AAAAAAAACRc/OXsCOC7M_mk/s400/binary2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;2nd in-Faro:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://2.bp.blogspot.com/-FRMYpkOdQbM/Uq7P1JS4BCI/AAAAAAAACRY/0qE01kWzlHE/s400/binary3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;out-Faro:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-9KMuxP3ozb4/Uq7P1FJO6YI/AAAAAAAACRU/9ItWqREP3sw/s400/binary4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Queen of Clubs&lt;/em&gt; is now in the 7th position. Also, its really interesting that this works irrespective of the number of cards in the deck.&lt;/p&gt;
&lt;p&gt;I also found that the order of (2n+2) out-Faro shuffle is equal to the order of (2n) in-Faro shuffles.&lt;/p&gt;
&lt;p&gt;I find that pretty interesting and I do not really see that to be obvious. It also implies that for no 2n, In-Faro=Out-Faro (I think). I will be investigating on these more later.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4.bp.blogspot.com/-65LUDQXD348/Uq3ICctaxPI/AAAAAAAACLo/WYRQ_r6GCvM/s640/Untitled-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-65LUDQXD348/Uq3ICctaxPI/AAAAAAAACLo/WYRQ_r6GCvM/s1600/Untitled-2.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>